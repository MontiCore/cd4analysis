/* (c) https://github.com/MontiCore/monticore */

plugins {
  id 'java-library'
  id 'java-gradle-plugin'
  id 'maven-publish'
}

configurations {
  stdefTool
}

dependencies {
  implementation group:'de.se_rwth.commons', name:'se-commons-gradle', version:mc_version
  stdefTool group: 'de.monticore.lang', name: 'cd4analysis', version: mc_version
  compileOnly(project(":cdlang"))

  testImplementation "org.junit.jupiter:junit-jupiter-api:$junit_version"
  testImplementation "org.junit.vintage:junit-vintage-engine:$junit_version"
  testImplementation gradleTestKit()
}

sourceSets {
  main.compileClasspath += configurations.stdefTool
  test.compileClasspath += configurations.stdefTool
}

gradlePlugin {
  plugins {
    stdefplugin {
      id = "de.rwth.se.symtabdefinition"
      implementationClass = "de.monticore.symtabdefinition.gradleplugin.SymTabDefinitionGradlePlugin"
    }
  }
}

publishing {
  repositories.maven {
    credentials.username mavenUser
    credentials.password mavenPassword
    def releasesRepoUrl = "https://nexus.se.rwth-aachen.de/content/repositories/monticore-releases/"
    def snapshotsRepoUrl = "https://nexus.se.rwth-aachen.de/content/repositories/monticore-snapshots/"
    url = version.endsWith("SNAPSHOT") ? snapshotsRepoUrl : releasesRepoUrl
  }
}

// write the version to the jar
tasks.register('generateResources') {
  ext {
    propFile = file("$buildDir/generated/buildInfo.properties")
  }
  outputs.file propFile
  doLast {
    mkdir propFile.parentFile
    propFile.text = "version=$project.version"
  }
}
processResources {
  from files(generateResources)
}

tasks.withType(Test) {
  useJUnitPlatform()
  dependsOn project.tasks.getByPath(':cdlang:jar')
}
