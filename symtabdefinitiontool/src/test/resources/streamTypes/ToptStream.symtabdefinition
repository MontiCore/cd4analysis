import Stream;
import EventStream;
import SyncStream;
import UntimedStream;

symtabdefinition ToptStream {

  class ToptStream<T> implements Stream<T> {
    + Optional<T> first();
    + Optional<T> nth(long n); // nicht konform mit TechReport, ist aber sinnvoller

    + static <S> ToptStream<S> toptRepeat(S elem, long n);
    + static <S> ToptStream<S> toptIterate(S -> S elem, S elem);
    + static <S, U> ToptStream<S> toptProjFst(ToptStream<(S,U)> list);
    + static <S, U> ToptStream<U> toptProjSnd(ToptStream<(S,U)> list);

    // ----------- Implementations
    + Optional<ToptStream<T>> dropFirst();
    + ToptStream<T> take(long n);
    + ToptStream<T> dropMultiple(long n);
    + ToptStream<T> times(long n); // <2>.times(24)
    + ToptStream<T> infTimes();
    + <U> ToptStream<U> map(T -> U f);
    + ToptStream<T> filter(T -> boolean predicate);
    + ToptStream<T> takeWhile(T -> boolean predicate);
    + ToptStream<T> dropWhile(T -> boolean predicate);
    + ToptStream<T> rcDups();
    + <U> ToptStream<(T,U)> zip(ToptStream<U> second);
    + <U> ToptStream<U> scanl(U -> T -> U f, U acc);

    // Topt specific methods
    + ToptStream<T> delay(long n);
    + long sizeEmptyTimeslices();

    + UntimedStream<T> untimed();
    + SyncStream<T> sync();
    + EventStream<T> event();
  }

}
