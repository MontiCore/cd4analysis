/* (c) https://github.com/MontiCore/monticore */
package de.monticore.cdlib.refactoring.extractsuperclass.method.tf;
import de.monticore.cdlib.TransformationUtil;
transformation ExtractSuperClassMethod {
  classdiagram $_{

    [[ :- $S [[ class $newParent{
       CDMethod $A1
    } ]] ]]

    $b [[ class $singleSubclass [[ :- extends $newParent]] {
      [[ CDMethod $A1  :- ]]
      }
    ]]

    list $listName [[ $c [[class $_ [[ :- extends $newParent]] {
      [[ CDMethod $A2  :- ]]
    }]] ]]

  }

  assign{
    $newParent = "NewParentClass"+$singleSubclass;
  }

  where{
    $A1.deepEquals($A2) && $c.getSuperclassList().isEmpty()  && $b.getSuperclassList().isEmpty()
  }

  do{
    List<de.monticore.cdbasis._ast.ASTCDClass> subs = Lists.newArrayList(get_$b());
    subs.addAll(get_$c());
    TransformationUtil.calculateAndSetName(get_$S(), subs);
  }
}
