/* (c) https://github.com/MontiCore/monticore */
plugins {
  id "java"
  id "java-library"
  id "monticore" version "$mc_version" // MontiCore Plugin
  id "maven-publish"
}


group = "de.monticore.lang"
description = "trafo-library"
sourceCompatibility = JavaVersion.VERSION_11
buildDir = file("$projectDir/target")


def grammarDir = "src/main/grammars"
def grammarOutDir = "$buildDir/generated-sources"
def testGrammarOutDir = "$buildDir/generated-test-sources/mc"


// configure non-standard source sets
sourceSets {
  test {
    java.srcDirs += [ "$testGrammarOutDir"]
  }
  main {
    java.srcDirs += [ "$grammarOutDir"]

  }
  grammars {
    resources {
      srcDirs(grammarDir)
      include "**/*.mc4"
    }
  }
}

configurations { grammar }


dependencies {
  implementation group: 'de.monticore', name: 'monticore-runtime', version: mc_version
  implementation group: 'de.monticore', name: 'monticore-grammar', version: mc_version
  implementation group: 'de.monticore', name: 'monticore-grammar-trafo', version: mc_version
  grammar group: 'de.monticore', name: 'monticore-grammar', version: mc_version, classifier: 'grammars'

  // Depend on cd4analysis by using the current (imported) project
  implementation project(":cdlang")
  implementation project(path: ":cdlang", configuration: 'trafo')
  implementation project(path: ":cdlang", configuration: 'grammars')
  grammar(project(path: ':cdlang')) {
    capabilities {
      requireCapability("de.monticore.lang:cdlang-grammars")
    }
  }

  implementation group: 'de.se_rwth.commons', name: 'se-commons-utilities', version: commons_version
  implementation group: 'de.se_rwth.commons', name: 'se-commons-groovy', version: commons_version
  implementation group: 'de.se_rwth.commons', name: 'se-commons-logging', version: commons_version

  testImplementation "org.junit.jupiter:junit-jupiter-api:$junit_version"
  testImplementation "org.junit.jupiter:junit-jupiter-params:$junit_version"
  testImplementation "org.junit.vintage:junit-vintage-engine:$junit_version"
  testRuntimeOnly "org.junit.jupiter:junit-jupiter-engine:$junit_version"

  compileOnly 'org.freemarker:freemarker:2.3.28'
}

repositories {
  if (("true").equals(getProperty('useLocalRepo'))) {
    mavenLocal()
  }
  mavenCentral()
  maven {
    credentials.username mavenUser
    credentials.password mavenPassword
    url repo
  }
}

// Fixes issue with java plugin in projects without resources
compileTestJava.doFirst { mkdir sourceSets.test.output.resourcesDir }

tasks.withType(Test) {
  maxParallelForks = Runtime.runtime.availableProcessors() ?: 1
}


java {
  withSourcesJar()
  registerFeature('grammars') {
    usingSourceSet(sourceSets.grammars)
  }
}

jar.dependsOn grammarsJar

task buildCD4ATrafoLibTrafos {}

fileTree(dir: "$projectDir/src/main/transformations", include: '**/**.mtr').each {
  def g = it
  def taskname = "buildCD4ATrafoLibTrafos${it.getName().substring(0, it.getName().lastIndexOf('.'))}"

  task "$taskname" (type: MontiTransExec){
    getClassPath().setFrom(
      project(":cdlang").configurations.trafoRuntimeClasspath,
      project(":cdlang").sourceSets.trafo.output
    )
    TFGenTool = 'de.monticore.tr.CD4CodeTFGenTool'
    input = file(g)
    outputDir = file("$buildDir/generated-sources")
    tasks.sourcesJar.dependsOn it
  }
  buildCD4ATrafoLibTrafos.dependsOn("$taskname")
}

compileJava.dependsOn += buildCD4ATrafoLibTrafos

task buildAll(type: GradleBuild) {
  tasks = ['build']
}

jar {
  archiveClassifier = null
}

// configure deployment
publishing {
  // configure what artifacts to publish
  publications {
    mavenJava(MavenPublication) {
      suppressPomMetadataWarningsFor('grammarsApiElements')
      suppressPomMetadataWarningsFor('grammarsRuntimeElements')
      from components.java
    }
  }
  repositories.maven {
    credentials.username mavenUser
    credentials.password mavenPassword
    def releasesRepoUrl = "https://nexus.se.rwth-aachen.de/content/repositories/monticore-releases/"
    def snapshotsRepoUrl = "https://nexus.se.rwth-aachen.de/content/repositories/monticore-snapshots/"
    url = version.endsWith("SNAPSHOT") ? snapshotsRepoUrl : releasesRepoUrl
  }
}
