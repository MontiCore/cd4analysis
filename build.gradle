import org.gradle.api.tasks.testing.logging.TestExceptionFormat
import org.gradle.api.tasks.testing.logging.TestLogEvent

/* (c) https://github.com/MontiCore/monticore */

plugins {
  id "maven-publish"
  id "io.github.themrmilchmann.ecj" version "0.2.0" apply(false) // Eclipse compiler as it's much faster than javac
  id "com.github.sherter.google-java-format" version "0.9"    // Task "verifyGoogleJavaFormat" and "googleJavaFormat"
}

description = "CD4Analysis"
buildDir = file("$projectDir/target")

ext {
  findbugs_version = "3.0.2"
  guava_version = "31.1-jre"
  antlr_version = "4.12.0"
  plantuml_version = "1.2020.15"
  jackson_version = "2.13.4"
  junit_version = "5.9.0"
  commons_cli_version = "1.5.0"
  commons_lang_version = "3.11"
  jupiter_version = "5.6.0"
  freemarker_version = "2.3.31"
  javaparser_version = "3.14.11"
  mockito_version = "3.11.1"
  logback_version = "1.2.3"
  apache_commons_version = '4.4'
}

repositories {
  mavenCentral()
}

subprojects {
  apply plugin: 'java-library'
  apply plugin: 'io.github.themrmilchmann.ecj'
  apply plugin: 'maven-publish'

  sourceCompatibility = JavaVersion.VERSION_11

  if (!hasProperty('bootstrap')) {
    allprojects {
      group = "de.monticore.lang.cd4analysis"
    }
  } else {
    allprojects {
      group = "de.monticore.lang.bs.cd4analysis"
    }
  }

  ext.grammarDir = 'src/main/grammars'
  buildDir = file("$projectDir/target")

  repositories {
    if (("true").equals(getProperty('useLocalRepo'))) {
      mavenLocal()
    }
    maven {
      credentials.username mavenUser
      credentials.password mavenPassword
      url repo
    }
    mavenCentral()
  }

  jar {
    archiveBaseName = 'cd4analysis'
    archiveClassifier = project.name
  }

  tasks.withType(Test) {
    useJUnitPlatform()
    testLogging {
      // controls whether test output is shown
      showExceptions true
      showCauses true
      showStackTraces true
      exceptionFormat TestExceptionFormat.FULL
      info {
        events TestLogEvent.FAILED,
          TestLogEvent.PASSED,
          TestLogEvent.SKIPPED,
          TestLogEvent.STANDARD_OUT
      }
    }
    afterTest { desc, result ->
      logger.lifecycle "${desc.className} > ${desc.name} ${result.resultType}"
    }
    afterSuite { desc, result ->
      if (!desc.parent) { // will match the outermost suite
        def output = "Results: ${result.resultType} (${result.testCount} tests, ${result.successfulTestCount} passed, ${result.failedTestCount} failed, ${result.skippedTestCount} skipped)"
        def startItem = '|  ', endItem = '  |'
        logger.lifecycle startItem + output + endItem
      }
    }
  }

  tasks.withType(JavaCompile) {
    options.encoding = "UTF-8"
    options.deprecation false
    options.warnings = false
    options.forkOptions.jvmArgs += ["-Xmx4G"]
    // TODO: reevaluate with new ecj plugin
    outputs.cacheIf { false } // ECJ has problem with caching
  }
  java {
    toolchain {
      languageVersion = JavaLanguageVersion.of(11)
    }
  }


}

googleJavaFormat {
  exclude '**/target/**'
}

verifyGoogleJavaFormat {
  ignoreFailures true
  exclude "**"
}  // do not check format in "build"

task checkfmt(type: com.github.sherter.googlejavaformatgradleplugin.VerifyGoogleJavaFormat) {}

task fmt {
  dependsOn tasks.named("googleJavaFormat")
}

evaluationDependsOnChildren()

def withDSTLGen = ("true").equals(getProperty('genTR'))
def withTagGen = ("true").equals(getProperty('genTagging'))

publishing {
  publications {
    def publ = maven(MavenPublication)
    // Use the Jar and grammarsJar, as well as the dependencies and module information from :cdlang
    publ.from project(":cdlang").components.java

    // trafolib is different
    // cdtool as -tool
    def subprojectsToBePublished = [
      ":cd2plantuml",
      ":cd2smt",
      ":cddiff",
      ":cdlang",
      ":cdmerge",
      ":language-server"
    ]

    subprojectsToBePublished
      .findAll { it != ':cdlang' }
      .each { subprojectName ->
        publ.artifact(project(subprojectName).tasks.jar) {
          group "de.monticore.lang"
        }
      }

    publ.artifact(project(":cdtool").tasks.jar){
      group "de.monticore.lang"
      classifier "tool"
    }

    publ.artifact(project(":cdtool").tasks.shadowJar)
    publ.artifact(project(":symtabdefinitiontool").tasks.shadowJar)
    publ.artifact(project(":symtabdefinitiontool:stdefgradle").tasks.jar)

    if (("false").equals(getProperty('publishMain'))) {
      publ.artifact(project(":cdlang").tasks.testSourcesJar) {
        group "de.monticore.lang"
      }
      // Trafos are published in :cdlang
      if (withTagGen) {
        // If available, publish tagging here too
        "tagging"(MavenPublication) {
          artifactId = project.name + "-tagging"
          artifact project(":cdlang").tasks.taggingJar { archiveAppendix = 'tagging' }
          artifact project(":cdlang").tasks.taggingSourcesJar { archiveAppendix = 'tagging'; archiveClassifier = 'sources' }
        }
      }
    }
  }
  repositories.maven {
    credentials.username mavenUser
    credentials.password mavenPassword
    def releasesRepoUrl = "https://nexus.se.rwth-aachen.de/content/repositories/monticore-releases/"
    def snapshotsRepoUrl = "https://nexus.se.rwth-aachen.de/content/repositories/monticore-snapshots/"
    url = version.endsWith('SNAPSHOT') ? snapshotsRepoUrl : releasesRepoUrl
  }
}


/*
 TODO (ALu): Once all dependant projects are published,
  we can properly use transitive dependencies:
   - cd4analysis (empty grammar project -> depends on cd4a:cdlang
   - ...

 */
