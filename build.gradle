/* (c) https://github.com/MontiCore/monticore */
plugins {
    id "java"
    id "monticore" version "6.2.0-SNAPSHOT" // MontiCore Plugin
    id "maven-publish"
    id "com.github.johnrengelman.shadow" version "4.0.4"
    id "de.set.ecj" version "1.4.1" // Eclipse compiler as it's much faster than javac
}

group = "de.monticore.lang"
version = "4.0.0-SNAPSHOT"
description = "CD4Analysis"
sourceCompatibility = "1.8"
buildDir = file("$projectDir/target")

ext.emf_version = "2.15.0"
ext.mc_version = "6.2.0-SNAPSHOT"
ext.commons_version = "1.7.9"
ext.grammar_classifier = "grammars"
ext.grammarDir = "src/main/grammars"
ext.grammarOutDir = "$buildDir/generated-sources/monticore/sourcecode"
ext.testGrammarDir = "src/test/grammars"
ext.testGrammarOutDir = "$buildDir/generated-test-sources/monticore/sourcecode"

// configure non-standard source sets
sourceSets {
    main {
        java.srcDirs += ["$projectDir/target/generated-sources/monticore/sourcecode"]
    }
    test {
        java.srcDirs += ["$projectDir/target/generated-test-sources/monticore/sourcecode"]
    }
}
subprojects {
    apply plugin: 'idea'
    idea {
        module {
            testSourceDirs += file("$projectDir/target/generated-test-sources/monticore/sourcecode")
        }
    }
}

configurations { grammar }

dependencies {
    implementation "de.monticore:monticore-runtime:$mc_version"
    implementation "de.monticore:monticore-grammar:$mc_version"
    compile "de.monticore:monticore-grammar:$mc_version"
    compile "de.monticore:monticore-grammar:$mc_version:$grammar_classifier"
    grammar "de.monticore:monticore-grammar:$mc_version:$grammar_classifier"
    implementation "de.se_rwth.commons:se-commons-logging:$commons_version"
    implementation "de.se_rwth.commons:se-commons-utilities:$commons_version"
    implementation "com.google.guava:guava:23.0"
    implementation "org.antlr:antlr4-runtime:4.7.1"
    implementation "net.sourceforge.plantuml:plantuml:1.2018.12"
    implementation "ch.qos.logback:logback-classic:1.1.7"
    testImplementation "junit:junit:4.11"
    testImplementation "de.monticore:monticore-runtime:$mc_version:tests"
    testImplementation "de.monticore:monticore-runtime:$mc_version"
}

repositories {
    mavenLocal()
    maven {
        credentials.username mavenUser
        credentials.password mavenPassword
        url repo
    }
}

def grammarDependencies = [
        CDBasis           : [],
        CDInterfaceAndEnum: ["CDBasis"],
        CDAssociation     : ["CDBasis"],
        CD4Analysis       : ["CDInterfaceAndEnum", "CDAssociation"],
        CD4CodeBasis      : ["CDBasis", "CDInterfaceAndEnum"],
        CD4Code           : ["CD4Analysis", "CD4CodeBasis"],
];

def testGrammarDependencies = [
        TestCDBasis           : ["CDBasis"],
        TestCDInterfaceAndEnum: ["CDInterfaceAndEnum"],
        TestCDAssociation     : ["CDAssociation"],
        TestCD4CodeBasis      : ["CD4CodeBasis"],
]

String createGrammarName(String name) {
    "${grammarDir}/de/monticore/${name}.mc4"
}

String createTestGrammarName(String name) {
    "${testGrammarDir}/de/monticore/${name}.mc4"
}

// one task per grammar file
grammarDependencies.each {
    def g = createGrammarName(it.key)
    def grammarName = it.key
    def dependencies = it.value

    task "generateGrammar${grammarName}"(type: MCTask) {
        def dependsOnGrammars = grammarDependencies[grammarName].collect { name -> tasks["generateGrammar${name}"] }
        dependsOn dependsOnGrammars

        def grammarFile = file g
        grammar = grammarFile
        outputDir = file grammarOutDir
        handcodedPath file("$projectDir/src/main/java")
        def grammarIncludingPackage = file(grammarDir).toURI().relativize(grammarFile.toURI()).toString()

        def uptoDate = incCheck(grammarIncludingPackage)

        def superGrammarsList = dependencies.collect {
            def grammar = file createGrammarName(it)
            return grammar.toURI()
        }
        superGrammars.from(superGrammarsList)

        outputs.upToDateWhen { uptoDate }
    }
}

// one task per test grammar file
testGrammarDependencies.each {
    def g = createTestGrammarName(it.key)
    def grammarName = it.key
    def dependencies = it.value

    task "generateTestGrammar${grammarName}"(type: MCTask) {
        def dependsOnGrammars = grammarDependencies[grammarName].collect { name -> tasks["generateGrammar${name}"] }
        dependsOn dependsOnGrammars

        def grammarFile = file g
        grammar = file g
        outputDir = file testGrammarOutDir
        handcodedPath file("$projectDir/src/test/java")
        def grammarIncludingPackage = file(testGrammarDir).toURI().relativize(grammarFile.toURI()).toString()
        def uptoDate = incCheck(grammarIncludingPackage)

        def superGrammarsList = dependencies.collect {
            def grammar = file createGrammarName(it)
            return grammar.toURI()
        }
        superGrammars.from(superGrammarsList)

        outputs.upToDateWhen { uptoDate }
    }
}

task generate {
    dependsOn project.collect { it.tasks.findAll { task -> task.name.startsWith("generateGrammar") } }
}

task generateTest {
    dependsOn project.collect { it.tasks.findAll { task -> task.name.startsWith("generateTestGrammar") } }
}

compileJava {
    dependsOn project.collect { it.tasks.findAll { task -> task.name.startsWith("generateGrammar") } }
}

compileTestJava {
    dependsOn project.collect { it.tasks.withType(MCTask) }
}

// Fixes issue with java plugin in projects without resources
compileTestJava.doFirst { mkdir sourceSets.main.output.resourcesDir }

tasks.withType(JavaCompile) {
    options.fork = true
}

tasks.withType(Test) {
    maxParallelForks = Runtime.runtime.availableProcessors() ?: 1
}

test {
    testLogging {
        exceptionFormat = 'full'
        showStackTraces = true
        showStandardStreams = true
    }

    // listen to standard out and standard error of the test JVM(s)
    onOutput { descriptor, event ->
        logger.lifecycle("Test: " + descriptor + " produced standard out/err: " + event.message)
    }
}

tasks.withType(JavaCompile) {
    options.encoding = "UTF-8"
    options.deprecation false
    options.warnings = false
}

// build sources jar in addition
task sourcesJar(type: Jar) {
    from sourceSets.main.allJava
    archiveClassifier = "sources"
}

// build javadoc jar in addition
task javadocJar(type: Jar) {
    from javadoc
    archiveClassifier = "javadoc"
}
// generated java doc contains errors, disable for now
javadoc.failOnError(false)

shadowJar { // all in one jar
    manifest {
        attributes "Main-Class": "de.monticore.umlcd4a.CD4ACLI"
    }
    archiveClassifier = "cli"
}

// build grammar jar as well
task grammarJar(type: Jar) {
    from("$projectDir/src/main/grammars/") { include "**/*.mc4" }
    archiveClassifier = "grammars"
}

task testReport(type: TestReport) {
    destinationDir = file("$buildDir/reports/allTests")
    // Include the results from the 'test' task
    reportOn tasks.withType(Test)
}

// configure deployment
publishing {
    // configure what artifacts to publish
    publications {
        mavenJava(MavenPublication) {
            artifactId = "$project.name"
            from components.java
            artifact sourcesJar
            artifact javadocJar
            //artifact shadowJar
            artifact grammarJar
        }
    }
    repositories.maven {
        credentials.username mavenUser
        credentials.password mavenPassword
        def releasesRepoUrl = "https://nexus.se.rwth-aachen.de/content/repositories/monticore-releases/"
        def snapshotsRepoUrl = "https://nexus.se.rwth-aachen.de/content/repositories/monticore-snapshots/"
        url = version.endsWith("SNAPSHOT") ? snapshotsRepoUrl : releasesRepoUrl
    }
}
