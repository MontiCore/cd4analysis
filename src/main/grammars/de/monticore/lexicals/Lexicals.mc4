package de.monticore.lexicals;

component grammar Lexicals {
 
  token Name =
        ( 'a'..'z' | 'A'..'Z' | '_' | '$' )( 'a'..'z' | 'A'..'Z' | '_' | '0'..'9' | '$' )*;
  
  fragment token NEWLINE =
    ('\r' '\n' |
    '\r' |
    '\n' ):
  ;

  token WS =
    (' ' | 
    '\t' |
     '\r' '\n' |
    '\r' |
    '\n' ) :{_channel = HIDDEN;};
    
  token SL_COMMENT =
    "//" (~('\n' |
      '\r' )
    )*
    ('\n' |
      '\r' ('\n' )?
    )?
    : {_channel = HIDDEN;
    if (getCompiler() != null) {
      mc.ast.Comment _comment = new mc.ast.Comment(getText());
      _comment.set_SourcePositionStart(new mc.ast.SourcePosition(getLine(), getCharPositionInLine()));
      _comment.set_SourcePositionEnd(getCompiler().computeEndPosition(getToken()));
      getCompiler().addComment(_comment);
  }};

  token ML_COMMENT =
    "/*" ({_input.LA(2) != '/'}?'*' |
     NEWLINE |
      ~('*' |
      '\n' |
      '\r' )
    )*
    "*/" : {_channel = HIDDEN;
    if (getCompiler() != null) {
      mc.ast.Comment _comment = new mc.ast.Comment(getText());
      _comment.set_SourcePositionStart(new mc.ast.SourcePosition(getLine(), getCharPositionInLine()));
      _comment.set_SourcePositionEnd(getCompiler().computeEndPosition(getToken()));
      getCompiler().addComment(_comment);
  }};

}