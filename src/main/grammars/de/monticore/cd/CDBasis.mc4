/* (c) https://github.com/MontiCore/monticore */

package de.monticore.cd;

/*
   MCG for CD 4 Basis

   This is the basis language component for CD4Analysis and CD4Code
   
   It contains class structures with attributes, but omits
   interfaces, enums, modifiers, methods.

   It uses 
   * ExpressionsBasis, MCLiteralsBasis  (for the Expressions)
   * MCBasicTypes (for the types in CS and AST) and
   * TypesSymbols (for imported/exported TypeSymbols) 
   as holes that shall be filled in concrete, complete languages
   by a variety of available grammars.
*/

component grammar CDBasis extends
    de.monticore.literals.MCLiteralsBasis,
    de.monticore.expressions.ExpressionsBasis,
    de.monticore.types.MCBasicTypes,
    de.monticore.types.TypesSymbols,
    de.monticore.UMLStereotype {

  /* ==== General ==== */
  /** The artifact header:
      import statements, package definition
  */
  CDCompilationUnit =
    ("package" package:(Name& || ".")+ ";")?
    MCImportStatement*
    (key("targetpackage") targetpackage:(Name& || ".")+ ";")?
    CDTargetImportStatement*
    CDDefinition;

  /** The class diagram: defines a set of elements
  */
  symbol scope CDDefinition = 
    CDModifier key("classdiagram") Name "{" CDElement* "}";

  /** CDModifier is the basic modifier structure, to use in the different cd elements
    @attribute CDDirectModifier
                  the interface for all modifiers
    @attribute Stereotype
                  the MontiCore stereotype
  */
  CDModifier =
    CDDirectModifier* Stereotype?;

  /** CDDirectModifier is an interface for all possible modifiers for elements in the cd
      we have the modifier as an interface plus a list of (already) available options
      to support better extensibility and adaptability.
  */
  interface CDDirectModifier;

  /** CDAbstractModifier is a specific modifier available in CD4A to signal that an element is abstract.
      It doesn't have any attributes, because it can be simply checked on the occurrence
      of the CDAbstractModifier in the CDDirectModifier list in the CDModifier.
  */
  CDAbstractModifier implements CDDirectModifier = "abstract";
  CDFinalModifier    implements CDDirectModifier = "final";
  CDStaticModifier   implements CDDirectModifier = "static";


  /* ==== CDElement ==== */
  /** CDElement denotes the basic elements of a class diagram.
      This includes Classes, Interfaces, Enums, Associations
      but meant for extension if needed.
  */
  interface CDElement;

  /** CDType are all of the CDElements, which can be used to describe a 
      type for e.g. variables, method arguments, ...
  */
  interface symbol CDType extends CDElement, Type;

  /** This nonterminal construction is used for allowing to add 
      Interface "extension" in the subgrammar CDInterfaceAndEnum.
      (and to leave this empty, if there are no "extension"s).
  */
  
  /** This adds the possibility for classes to implement
      interfaces (by filling the external NT defined there)
   */
  CDInterfaceUsage =
    ( "implements" interface:(MCObjectType || ",")+ );

  CDExtendUsage =
    ( "extends" superclass:(MCObjectType || ",")+ );

  scope CDClass implements CDType = 
    CDModifier "class" Name
    CDExtendUsage?
    CDInterfaceUsage?
    ( "{"
        CDMember*
      "}"
    | ";" );


  /* ==== Attributes ==== */
  interface CDMember;

  symbol CDAttribute implements CDMember, Field = 
    CDModifier MCType Name ("=" Expression)? ";";

  /* ==== Symbols ==== */
  /** The symbol for CDAttributes contains the link to the type of the attribute
      and the SymModifier. The SymModifier is the handwritten information of the
      connected modifier in the symbol table, which provides the condensed information
      of all available modifiers.
  */
  symbolrule CDAttribute =
    modifier: de.monticore.cd.cdbasis._symboltable.SymModifier
  ;

  /** The symbol for CDType has the information what specific type it describes.
      The symbol contains all the interfaces and superclasses of the given type.
      The modifier is a collection of all the available CDModifier.
  */
  symbolrule CDType =
    modifier: de.monticore.cd.cdbasis._symboltable.SymModifier
    interfaces: de.monticore.types.check.SymTypeExpression*
  ;


  /** This import statement allows to explain in the model, which
      additional imports shall be added to the generated code
      (beyond the imports that the generator identifies itself).
  */
  CDTargetImportStatement = key("targetimport") MCQualifiedName ("." Star:["*"])? ";" ;

}
