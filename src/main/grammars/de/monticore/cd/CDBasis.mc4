/* (c) https://github.com/MontiCore/monticore */

package de.monticore.cd;

/*
   MCG for CD 4 Basis
*/

component grammar CDBasis extends
    de.monticore.types.MCBasicTypes,
    de.monticore.literals.MCLiteralsBasis,
    de.monticore.expressions.ExpressionsBasis,
    de.monticore.UMLStereotype {

  /* ==== General ==== */
  CDCompilationUnit =
    ("package" package:(Name& || ".")+ ";")?
    MCImportStatement*
    (key("targetpackage") targetpackage:(Name& || ".")+ ";")?
    CDDefinition;
    // BR TODO: "targetimport" = import für alle generierten klassen. wäre hilfreich
    // es sei denn, "targetimport" lässt sich unter "import" fürs CD subsumieren

  symbol scope CDDefinition = 
    CDModifier key("classdiagram") Name "{" CDElement* "}";

  /** CDModifier is the basic modifier structure, to use in the different cd elements
    @attribute CDDirectModifier
                  the interface for all modifiers
    @attribute Stereotype
                  the MontiCore stereotype
  */
  CDModifier =
    CDDirectModifier* Stereotype?;

  /** CDDirectModifier is an interface for all possible modifiers for elements in the cd
      we have the modifier as an interface plus a list of (already) available options
      to support better extensibility and adaptability.
  */
  interface CDDirectModifier;

  /** CDAbstractModifier is a specific modifier available in CD4A to signal that an element is abstract.
      It doesn't have any attributes, because it can be simply checked on the occurrence
      of the CDAbstractModifier in the CDDirectModifier list in the CDModifier.
  */
  CDAbstractModifier implements CDDirectModifier = "abstract";
  CDFinalModifier    implements CDDirectModifier = "final";
  CDStaticModifier   implements CDDirectModifier = "static";


  /* ==== CDElement ==== */
  /** CDElement denotes the basic elements of a class diagram.
      This includes Classes, Interfaces, Enums, Associations
      but meant for extension if needed.
  */
  interface CDElement;

  /** CDType are all of the CDElements, which can be used to describe a 
      type for e.g. variables, method arguments, ...
  */
  interface symbol CDType extends CDElement, Type;

  /** This is used for allowing to add Interface "extension" in a 
      subgrammar.
      (and to leave this empty, if there are no "extension"s).
  */   
  // BR TODO: man könnte  "external" weglassen, durch: CDInterfaceUsage = ;
  // und in Subgrammar extenden 
  external CDInterfaceUsage;

  scope CDClass implements CDType = 
    CDModifier "class" Name
    // BR TODO: da ist jetzt Mehrfachvererbung eingebaut. 
    //   Sollen wir das rausfaktorisieren (ähnlich den Interfaces?)
    ( "extends" superclass:(MCObjectType || ",")+ )?
    CDInterfaceUsage?
    ( "{"
        CDMember*
      "}"
    | ";" );


  /* ==== Attributes ==== */
  interface CDMember;

  symbol CDAttribute implements CDMember, Field = 
    CDModifier MCType Name ("=" CDDefaultValue)? ";";

  // BR: TODO: Unfold? (also oben einbauen)
  CDDefaultValue = Expression;

  /* ==== Symbols ==== */
  /** The symbol for CDAttributes contains the link to the type of the attribute
      and the SymModifier. The SymModifier is the handwritten information of the
      connected modifier in the symbol table, which provides the condensed information
      of all available modifiers.
  */
  symbolrule CDAttribute =
    modifier: de.monticore.cd.cdbasis._symboltable.SymModifier
  ;

  /** The symbol for CDType has the information what specific type it describes.
      The symbol contains all the interfaces and superclasses of the given type.
      The modifier is a collection of all the available CDModifier.
  */
  symbolrule CDType =
    modifier: de.monticore.cd.cdbasis._symboltable.SymModifier
  ;
}
