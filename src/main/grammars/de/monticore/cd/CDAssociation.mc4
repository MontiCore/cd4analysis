/* (c) https://github.com/MontiCore/monticore */
package de.monticore.cd;

/* Alpha-version: This is intended to become a MontiCore stable grammar. */

/**
   This component grammar defines associations for CD4Analysis and CD4Code.

   This includes directions, qualifiers, multiplicities and compositions.   
*/

component grammar CDAssociation extends de.monticore.cd.CDBasis {

  /** An associations/composition has a name, a left, right part and a direction
   */
  symbol scope CDAssociation implements CDElement =
    CDModifier*
    (["association"] | ["composition"]) // TODO set both as key(...), currently not possible
    ([derived:"/"])? Name?

    left:CDAssociationLeftSide

    CDAssociationDirection

    right:CDAssociationRightSide
    ";";

  /* ==== Association ==== */
  interface CDAssociationDirection;

  /** The list of association directions available as variants of CDAssociationDirection:
  */
  CDLeftToRightDir implements CDAssociationDirection = {noSpace(2)}? "-" ">";
  CDRightToLeftDir implements CDAssociationDirection = {noSpace(2)}? "<" "-";
  CDBiDir          implements CDAssociationDirection = {noSpace(2, 3)}? "<" "-" ">";
  CDUnspecifiedDir implements CDAssociationDirection = {noSpace(2)}? "-" "-";

  CDOrdered = {noSpace(2,3)}? "{" ["ordered"] "}";

  /** CDAssociationSide defines the properties of one side of
      an association. This construction allows developers to access 
      both sides of the associations using the same interface,
      even though the concrete syntax differs in their order.
  */
  interface CDAssociationSide =
    CDModifier* CDCardinality? MCQualifiedName
    CDQualifier? CDRole? ordered:CDOrdered?; 

  CDAssociationLeftSide implements CDAssociationSide =
    ordered:CDOrdered? CDModifier* CDCardinality?
    MCQualifiedName CDQualifier? CDRole?;

  CDAssociationRightSide implements CDAssociationSide =
    CDRole? CDQualifier? MCQualifiedName
    CDCardinality? CDModifier* ordered:CDOrdered?;

  /** A role symbol is a simple name. It is embedded in the association.
   */
  symbol CDRole implements Field = "(" Name ")";

  /** CDCardinality captures the cardinality of an association side.
      Associations currently allow the for standard cardinalities, but
      this is extensible. Visitors help to identify the correct cardinality.
  */  
  interface CDCardinality;
  CDCardMult       implements CDCardinality = "[*]";
  CDCardOne        implements CDCardinality = "[1]";
  CDCardAtLeastOne implements CDCardinality = "[1..*]";
  CDCardOpt        implements CDCardinality = "[0..1]";

  /** CDQualifier describes the two froms of explicit qualifications:
      either thrugh an attribute value contained in the value-object
      or through a type (such as String) , which the value-object doesn't
      know about.
  */
  //   CDQualifier = SquareBracketOpen byAttributeName:Name@Field SquareBracketClose | "[" byType:MCType "]"; 
  //   CDSquareBracketOpen = {noSpace(2)} "[" "[" ; 
  //   CDSquareBracketClose = {noSpace(2)} "]" "]" ;
  CDQualifier = {noSpace(2)}? "[" "[" byAttributeName:Name@Field {noSpace(2)}? "]" "]" | "[" byType:MCType "]";

  /** Write a composition in short form inside the composite class:
      class A {
        -> (r) B [*];
      }
  */
  CDDirectComposition implements CDMember =
    {noSpace(2)}? "-" ">" CDAssociationRightSide ";";


  /* ==== Symbols ==== */

  /** The symbol for CDRole contains all the information of one side of an association.
      It contains the link to the type and the SymAssociation, which contains the
      basic information of an association.
  */
  symbolrule CDRole =
    isNavigable: boolean
    cardinality: Optional<de.monticore.cd.cdassociation._ast.ASTCDCardinality>

    // Defined exactly if a qualifier is given:
    attributeQualifier: Optional<de.monticore.types.typesymbols._symboltable.FieldSymbol> // TODO SVa: should this be just String?, because its the name of the attribute?
    typeQualifier: Optional<de.monticore.types.check.SymTypeExpression>

    // // TODO BR: stimmt dieser Satz:
    // the type where the role points to is available through the association
    // wäre es möglich, dass die Rolle selbst zwar ihre assoziation kennt
    // aber nicht ob sie "links" oder "rechts" sitzt
    // dann wäre es wohl sinnvoll, der Rolle den targetType direkt mitzugeben
    // (auch wenn das Redundanz einbaut)
    // targetType: de.monticore.types.check.SymTypeExpression 
    
    association: Optional<de.monticore.cd.cdassociation._symboltable.SymAssociation> // TODO SVa: should this always be present, even in the DirectComposition?
    modifier: de.monticore.cd.cdbasis._symboltable.SymModifier
    isOrdered: boolean
  ;

  /** The symbol for CDAssociation is defined for named associations.
      The SymAssociation object provides all relevant 
      information obout the association and the roles.
  */
  symbolrule CDAssociation =
    association: de.monticore.cd.cdassociation._symboltable.SymAssociation;
}
