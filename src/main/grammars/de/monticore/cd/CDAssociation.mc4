/* (c) https://github.com/MontiCore/monticore */

package de.monticore.cd;

/*
   MCG for CD 4 Association, Version 27/04/2020
*/

component grammar CDAssociation extends de.monticore.cd.CDBasis {

  symbol scope CDAssociation implements CDElement = CDModifier
    (["association"] | ["composition"]) // TODO set both as key(...), currently not possible
    ([derived:"/"])? Name?

    left:CDAssociationLeftSide

    CDAssociationDirection

    right:CDAssociationRightSide
    ";";

  /* ==== Association ==== */
  CDAssociationDirection =
    ( leftToRight:["->"]
    | rightToLeft:["<-"]
    | bidirectional:["<->"]
    | unspecified:["--"] );

  interface CDAssociationSide =
    CDModifier CDCardinality? MCQualifiedName
    CDQualifier? CDRole? ["ordered"]?; // TODO set as key(...), currently not possible

  CDAssociationLeftSide implements CDAssociationSide =
    ["ordered"]? CDModifier CDCardinality?
    MCQualifiedName CDQualifier? CDRole?;

  // TODO implementation could be ommited, because CDAssociationSide already has this structure
  CDAssociationRightSide implements CDAssociationSide =
    CDRole? CDQualifier? MCQualifiedName
    CDCardinality? CDModifier ["ordered"]?;

  symbol CDRole = "(" Name ")";

  interface CDCardinality;
  CD4ACardinalityMultiple   implements CDCardinality = "[*]";
  CD4ACardinalityExactOne   implements CDCardinality = "[1]";
  CD4ACardinalityAtLeastOne implements CDCardinality = "[1..*]";
  CD4ACardinalityOptional   implements CDCardinality = "[0..1]";

  symbol CDQualifier = "[[" byAttributeName:Name "]]" | "[" byType:MCType "]";

  /** Write a composition in short form:
      class A {
        -> (b) B [*];
      }

      is the short form for:
      class A;
      composition A -> (b) B [*];
  */
  CDDirectComposition implements CDMember =
    "->" CDAssociationRightSide ";";


  /* ==== Symbols ==== */

  /** The symbol for CDRole contains all the information of one side of an association.
      It contains the link to the type and the SymAssociation, which contains the
      basic information of an association.
  */
  symbolrule CDRole =
    navigable: boolean
    cardinality: Optional<de.monticore.cd.cdassociation._ast.ASTCDCardinality>
    qualifier: Optional<de.monticore.cd.cdassociation._symboltable.CDQualifierSymbol>
    associationTarget: de.monticore.cd.cdbasis._symboltable.CDTypeSymbolLoader
    association: de.monticore.cd.cdassociation._symboltable.SymAssociation
    modifier: de.monticore.cd.cdbasis._symboltable.SymModifier
    isOrdered: boolean
  ;

  /** The symbol for CDAssociation is only defined for named associations.
      The connection to the SymAssociation object provides the
      navigation to the association information and the roles.
  */
  symbolrule CDAssociation =
    association: de.monticore.cd.cdassociation._symboltable.SymAssociation;

  symbolrule CDQualifier =
    attribute: Optional<de.monticore.cd.cdbasis._symboltable.CDMemberSymbolLoader>
    type: Optional<de.monticore.cd.cdbasis._symboltable.CDTypeSymbolLoader>
  ;
}