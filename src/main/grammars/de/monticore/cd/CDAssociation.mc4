/* (c) https://github.com/MontiCore/monticore */

package de.monticore.cd;

/*
   MCG for CD 4 Association, Version 27/04/2020
*/

component grammar CDAssociation extends de.monticore.cd.CDBasis {

  symbol scope CDAssociation implements CDElement = 
    CDModifier
    (["association"] | ["composition"]) // TODO set both as key(...), currently not possible
    ([derived:"/"])? Name?

    left:CDAssociationLeftSide

    CDAssociationDirection

    right:CDAssociationRightSide
    ";";

  /* ==== Association ==== */
  CDAssociationDirection =
    ( leftToRight  :["->"]
    | rightToLeft  :["<-"]
    | bidirectional:["<->"]
    | unspecified  :["--"] );

  /** CDAssociationSide defines the properties of one side of
      an association. This allows the same AST access on both sides,
      even though the concrete syntax differs in their order.
  */
  interface CDAssociationSide =
    CDModifier CDCardinality? MCQualifiedName
    CDQualifier? CDRole? ["ordered"]?; // TODO set as key(...), currently not possible

  CDAssociationLeftSide implements CDAssociationSide =
    ["ordered"]? CDModifier CDCardinality?
    MCQualifiedName CDQualifier? CDRole?;

  CDAssociationRightSide implements CDAssociationSide =
    CDRole? CDQualifier? MCQualifiedName
    CDCardinality? CDModifier ["ordered"]?;

  symbol CDRole implements Field = "(" Name ")";

  /** CDCardinality captures the cardinality of an association side.
      Associations currently allow the for standard cardinalities, but
      this is extensible. Visitors help to identify the correct cardinality.
  */  
  interface CDCardinality;
  CDCardMult       implements CDCardinality = "[*]";
  CDCardOne        implements CDCardinality = "[1]";
  CDCardAtLeastOne implements CDCardinality = "[1..*]";
  CDCardOpt        implements CDCardinality = "[0..1]";

  /** CDQualifier describes the two froms of explicit qualifications:
      either thrugh an attribute value contained in the value-object
      or through a type (such as String) , which the value-object doesn't
      know about.
  */
  CDQualifier = "[" "[" {noSpace()} byAttributeName:Name@Field "]" "]" {noSpace()} | "[" byType:MCType "]"; // add optional coco which forbids the usage

  /** Write a composition in short form inside the composite class:
      class A {
        -> (r) B [*];
      }

      is the short form for:
      class A;
      composition A -> (r) B [*];
  */
  CDDirectComposition implements CDMember =
    "->" CDAssociationRightSide ";";


  /* ==== Symbols ==== */

  /** The symbol for CDRole contains all the information of one side of an association.
      It contains the link to the type and the SymAssociation, which contains the
      basic information of an association.
  */
  symbolrule CDRole =
    isNavigable: boolean
    cardinality: Optional<de.monticore.cd.cdassociation._ast.ASTCDCardinality>
      // TODO: handle from CDQualifier
      //qualifier: Optional<de.monticore.cd.cdassociation._symboltable.CDQualifierSymbol>
      attribute: Optional<de.monticore.types.typesymbols._symboltable.FieldSymbol>
      type: Optional<de.monticore.types.check.SymTypeExpression>

    associationTarget: de.monticore.types.check.SymTypeExpression
    association: de.monticore.cd.cdassociation._symboltable.SymAssociation
    modifier: de.monticore.cd.cdbasis._symboltable.SymModifier
    isOrdered: boolean
  ;

  /** The symbol for CDAssociation is only defined for named associations.
      The connection to the SymAssociation object provides the
      navigation to the association information and the roles.
  */
  symbolrule CDAssociation =
    association: de.monticore.cd.cdassociation._symboltable.SymAssociation;
}
