/* (c) https://github.com/MontiCore/monticore */

package de.monticore.cd;

/*
   MCG for CD 4 Analysis, Version 16/03/2020
*/

grammar CD4Analysis extends
    de.monticore.types.MCSimpleGenericTypes,
    de.monticore.literals.MCCommonLiterals,
    de.monticore.expressions.ExpressionsBasis,
    de.monticore.UMLStereotype {

  /* ==== General ==== */
  CDCompilationUnit =
    ("package" package:(Name& || ".")+ ";")? 
    (MCImportStatement)*
    CDDefinition;

  symbol scope CDDefinition = CDModifier "classdiagram" Name "{"
    CDElement*
  "}";

  /** CDModifier is the basic modifier structure, to use in the different cd elements
    @attribute CDDirectModifier
                  the interface for all modifiers
    @attribute Stereotype
                  the MontiCore stereotype
  */
  CDModifier =
    CDDirectModifier* Stereotype?;

  /** CDDirectModifier is an interface for all possible modifiers for elements in the cd
      we have the modifier as an interface instead of a list of (already) available options
      to support better extensibility and adaptability.

      There should be a visitor which can visit all the provided alternatives and behaves
      accordingly.
  */
  interface CDDirectModifier;

  /** CDAbstractModifier is a specific modifier available in CD4A to signal a element is abstract.
      It doesn't have any attributes, because it can be simply checked on the occurrence
      of the CDAbstractModifier in the CDDirectModifier list in the CDModifier.

      The logic before was to add a boolean attribute `isAbstract`:
        `CDAbstractModifier implements CDDirectModifier = ["abstract"]`
      but with the new logic, which splits each option in a different NT this is no longer needed.
  */
  CDAbstractModifier implements CDDirectModifier = "abstract";
  CDFinalModifier implements CDDirectModifier = "final";
  CDStaticModifier implements CDDirectModifier = "static";


  /* ==== CDElement ==== */
  /** CDElement denotes the basic elements of a class diagram.
      Currently there are:
        - Class
        - Interface
        - Enum
        - Association
      but it is easily extensible.
  */
  interface CDElement;

  /** CDType are all of the elements, which can be used to describe a type for e.g. variables, method arguments, ...
  */
  interface symbol scope CDType extends CDElement;

  // TODO have extends/implements as key
  CDClass implements CDType = CDModifier "class" Name
    ( key("extends")   superclass:(MCObjectType || ",")+ )?
    ( key("implements") interface:(MCObjectType || ",")+ )?
    ( "{"
        CDMember*
      "}"
    | ";" );

  CDInterface implements CDType = CDModifier "interface" Name
    ( key("extends") interface:(MCObjectType || ",")+ )?
    ( "{"
        CDMember*
      "}"
    | ";" );

  CDEnum implements CDType = CDModifier "enum" Name
    ( ("implements") interface:(MCObjectType || ",")+ )?
    ( "{"
        (CDEnumConstant || ",")* ";"
        CDMember*
      "}"
    | ";" );

  symbol scope CDAssociation implements CDElement = CDModifier
    (["association"] | ["composition"])
    ([Derived:"/"])? Name?

    left:CDAssociationLeftSide

    CDAssociationDirection

    right:CDAssociationRightSide
    ";";

  /* ==== Association ==== */
  CDAssociationDirection =
    ( leftToRight:["->"]
    | rightToLeft:["<-"]
    | bidirectional:["<->"]
    | unspecified:["--"] );

  interface CDAssociationSide =
    modifier:CDModifier
    cardinality:CDCardinality?
    referenceName:MCQualifiedName
    qualifier:CDQualifier?
    role:CDRole?;

  CDAssociationLeftSide implements CDAssociationSide =
    modifier:CDModifier
    cardinality:CDCardinality?
    referenceName:MCQualifiedName
    qualifier:CDQualifier?
    role:CDRole?;

  CDAssociationRightSide implements CDAssociationSide =
    role:CDRole?
    qualifier:CDQualifier?
    referenceName:MCQualifiedName
    cardinality:CDCardinality?
    modifier:CDModifier;

  symbol CDRole = "(" Name ")";

  interface CDCardinality;
  CD4ACardinalityMultiple   implements CDCardinality = "[*]";
  CD4ACardinalityExactOne   implements CDCardinality = "[1]";
  CD4ACardinalityAtLeastOne implements CDCardinality = "[1..*]";
  CD4ACardinalityOptional   implements CDCardinality = "[0..1]";

  // TODO check if this can have a symbol
  symbol CDQualifier = "[[" Name "]]" | "[" MCType "]";


  /* ==== Attributes ==== */
  interface CDMember;

  symbol CDAttribute implements CDMember = CDModifier MCType Name ("=" CDDefaultValue)? ";";

  CDEnumConstant = Name ( "(" cDEnumArgument:(CDEnumArgument || ",")+ ")" )?;

  CDEnumArgument = Expression;
  CDDefaultValue = Expression;

  /** Write a composition in short form:
      class A {
        -> (b) B [*];
      }

      is the short form for:
      class A;
      composition A -> (b) B [*];
  */
  CDDirectComposition implements CDMember =
    "->" CDAssociationRightSide ";";


  /* ==== Symbols ==== */
  /** The symbol for CDAttributes contains the link to the type of the attribute
      and the SymModifier. The SymModifier is the handwritten information of the
      connected modifier in the symbol table, which provides the condensed information
      of all available modifiers.
  */
  symbolrule CDAttribute =
    type: de.monticore.cd.cd4analysis._symboltable.CDTypeSymbolLoader
    modifier: de.monticore.cd.cd4analysis._symboltable.SymModifier
  ;

  /** The symbol for CDType has the information if what specific type it describes.
      The symbol contains all the interfaces and superclasses of the given type.
      The modifier is a collection of all the available CDModifier.
  */
  symbolrule CDType =
    isInterface: boolean
    isEnum: boolean
    isClass: boolean
    // TODO find better solution than SymbolLoader
    cdInterfaces: de.monticore.cd.cd4analysis._symboltable.CDTypeSymbolLoader*
    superClasses: de.monticore.cd.cd4analysis._symboltable.CDTypeSymbolLoader*
    modifier: de.monticore.cd.cd4analysis._symboltable.SymModifier
  ;

  /** The symbol for CDRole contains all the information of one side of an association.
      It contains the link to the type and the SymAssociation, which contains the
      basic information of an association.
  */
  symbolrule CDRole =
    navigable: boolean
    cardinality: Optional<de.monticore.cd.cd4analysis._ast.ASTCDCardinality>
    qualifier: Optional<de.monticore.cd.cd4analysis._symboltable.CDQualifierSymbol>
    associationTarget: de.monticore.cd.cd4analysis._symboltable.CDTypeSymbolLoader
    association: de.monticore.cd.cd4analysis._symboltable.SymAssociation
    modifier: de.monticore.cd.cd4analysis._symboltable.SymModifier
  ;

  /** The symbol for CDAssociation can only exist, if there is a specific global name
      for this specific association. The connection to the SymAssociation provides the
      navigation to the association information and the roles.
  */
  symbolrule CDAssociation =
    association: de.monticore.cd.cd4analysis._symboltable.SymAssociation;
}
