/* (c) https://github.com/MontiCore/monticore */

package de.monticore.cd;

/*
   MCG for CD 4 Analysis, Version 07/05/2019
*/

grammar CD4Analysis extends de.monticore.types.MCSimpleGenericTypes, de.monticore.literals.MCCommonLiterals {

  /** ASTCDCompilationUnit represents the complete Diagram
    @attribute package          The package declaration of this Classdiagram
    @attribute MCImportStatements List of imported elements
    @attribute cDDefinition   
  */
  CDCompilationUnit =
    ("package" package:(Name& || ".")+ ";")? 
    (MCImportStatement)*
    CDDefinition;


  /** ASTCDDefinition represents a Classdiagram
    @attribute name           Name of this Classdiagram
    @attribute cDClasses      List of Classes of this Classdiagram
    @attribute cDInterfaces   List of Interfaces of this Classdiagram
    @attribute cDEnums        List of Enums of this Classdiagram
    @attribute cDAssociations List of Associations of this Classdiagram
  */
  symbol scope CDDefinition = Modifier? "classdiagram" Name "{"
  (   CDClass
    | CDInterface
    | CDEnum
    | CDAssociation)* "}";

   interface symbol scope CDType = Name;

   interface symbol CDField = Name;

   interface symbol scope CDMethOrConstr = Name;


  /** ASTCDClass represents a Class in a Classdiagram
    @attribute modifier       Optional Modifier of this Class
    @attribute name           Name of this Class
    @attribute superclass     Optional Superclass of this Class
    @attribute interfaces     List of Interfaces implemented by this Class
    @attribute cDConstructors List of Constructors of this Class
    @attribute cDMethods      List of Methods of this Class
    @attribute cDAttributes   List of Attributes of this Class
  */
  CDClass implements CDType = Modifier?  "class" Name
  ( "extends"  superclass:MCObjectType)?
  ( TImplements interface:(MCObjectType || ",")+ )? stereotype:CDStereotype?
  ( "{"
    ( CDAttribute
    | CDConstructor
    | CDMethod )*
    "}"
  | ";" );

  // indirect token
  TImplements = { _input.LT(1).getText().equals("implements") }? Name; // implements is often association or role name (e.g., when creating the abstract syntax of CD4A itself or for the abstract syntax of Java)


  /** ASTCDInterface represents an Interface in a Classdiagram
    @attribute modifier       Optional Modifier of this Interface
    @attribute name           Name of this Interface
    @attribute interfaces     List of Interfaces extended by this Interface
    @attribute cDMethods      List of Methods of this Interface
    @attribute cDAttributes   List of Attributes of this Interface
  */
  CDInterface implements CDType = Modifier? "interface" Name
    ( "extends" interface:(MCObjectType || ",")+ )? stereotype:CDStereotype?
    ( "{"
      ( CDAttribute
      | CDMethod )*
      "}"
    | ";" );


  /** ASTCDEnum represents an Enumeration (enum type) in a Classdiagram
    @attribute modifier        Optional Modifier of this Enum
    @attribute name            Name of this Enum
    @attribute interfaces      List of Interfaces implemented by this Enum
    @attribute cDEnumConstants List of the Enum Constants
    @attribute cDConstructors  List of Constructors of this Enum
    @attribute cDMethods       List of Methods of this Enum
    @attribute cDAttributes    List of Attributes of this Enum
  */
   CDEnum implements CDType = Modifier? "enum" Name
    ( TImplements interface:(MCObjectType || ",")+ )?
    ( "{"
        (CDEnumConstant || ",")* ";"
        ( CDConstructor | CDMethod)*
      "}"
    | ";" );

  astrule CDEnum = CDAttribute*;

  /** ASTCDAttribute represents an Attribute of a Class or Interface
    @attribute modifier Modifier of this Attribute
    @attribute type     Type of this Attribute
    @attribute name     Name of this Attribute
    @attribute value    Value of this Attribute
  */
  CDAttribute implements CDField = Modifier? MCType Name ("=" Value)? ";";

  /** ASTCDEnumConstant represents a Constant of an Enumeration (enum type)
      in a Classdiagram
      @attribute name             Name of this Constant
      @attribute cDEnumParameters List of optional parameters of this Constant
  */
  CDEnumConstant implements CDField = Name ( "(" cDEnumParameter:(CDEnumParameter || ",")+ ")" )?;


  /** ASTCDEnumParameter represents a Parameter of an Enumeration Constant
    @attribute Value Value of this Parameter
  */
  CDEnumParameter = Value;


  /** ASTCDConstructor represents a Constructor of a Class or Interface
    @attribute name           Name of this Constructor
    @attribute cDParameters   List of Parameters of this Constructor
    @attribute exceptions     List of Exceptions thrown by this Constructor
  */
  CDConstructor implements CDMethOrConstr =
    Modifier
     Name "(" (CDParameter || ",")* ")"
    ("throws" exception:(MCQualifiedName || "," )+)?
    ";";


  /** ASTCDMethod represents a Method of a Class or Interface
      @attribute modifier       Modifier of this Method
      @attribute returnType     Return-Type of the return value of this Method
      @attribute name           Name of this Method
      @attribute cDParameters   List of Parameters of this Method
      @attribute exceptions     List of Exceptions thrown by this Method
  */
  CDMethod implements CDMethOrConstr =
    Modifier
    MCReturnType
     Name "(" (CDParameter || ",")* ")"
    ("throws" exception:(MCQualifiedName || ",")+)?
    ";";


  /** ASTCDParameter represents a Parameter of a Constructor or Method
    @attribute mctype Type of this Parameter
    @attribute ellipsis Optional indicator for a variable Parameter length
    @attribute name Name of this Parameter
  */
  CDParameter implements CDField =
  MCType (Ellipsis:["..."])? Name;
        

  /** ASTCDAssociation represents an Association between Classes or Interfaces
    @attribute readonly           True if Association is only read-only
    @attribute stereotype         Optional Stereotype
    @attribute Association        True if Association is of type "association"
    @attribute Composition        True if Association is of type "composition"
    @attribute derived            True if this is a derived Association
    @attribute name               Name of this Association
    @attribute leftModifier       Optional left side Modifier
    @attribute leftCardinality    Cardinality of the left side of this
                                  Association
    @attribute leftReferenceName  Name of the Class or Interface on the left
                                  side of this Association
    @attribute leftQualifier      Qualifier of the left side of this
                                  Association
    @attribute leftRole           Role of the Class or Interface on the left
                                  side of this Association
    @attribute leftToRight        True if Association is navigable from 
                                  left to right ("->")
    @attribute rightToLeft        True if Association is navigable from 
                                  right to left ("<-")
    @attribute bidirectional      True if Association is navigable in 
                                  both directions ("<->")
    @attribute unspecified        True if navigation of Association is 
                                  not specified  ("--")
    @attribute rightRole          Role of the Class or Interface on the right
                                  side of this Association
    @attribute rightQualifier     Qualifier of the right side of this
                                  Association
    @attribute rightReferenceName Name of the Class or Interface on the right
                                  side of this Association
    @attribute rightCardinality   Cardinality of the right side of this
                                  Association
    @attribute rightModifier      Optional right side Modifier
  */
  symbol scope CDAssociation = stereotype:CDStereotype?
    readOnly:TReadOnly?
    (["association"] | ["composition"])
    ([Derived:"/"])?  Name?
    leftModifier:Modifier?
    leftCardinality:Cardinality?

    leftReferenceName:MCQualifiedName
    leftQualifier:CDQualifier?
    ("(" leftRole:Name ")")?
    (   leftToRight:["->"]
      | rightToLeft:["<-"]
      | bidirectional:["<->"]
      | unspecified:["--"] )
    ("(" rightRole:Name ")")?
    rightQualifier:CDQualifier?
    rightReferenceName:MCQualifiedName
    rightCardinality:Cardinality?
    rightModifier:Modifier? ";" ;

  token TReadOnly = 'r' 'e' 'a' 'd' '-' 'o' 'n' 'l' 'y';

  Modifier = stereotype:CDStereotype?
    (["abstract"]
      | ["final"]
      | ["static"]
      | ["private"] | [private:"-"]
      | ["protected"] | [protected:"#"]
      | ["public"] | [public:"+"]
      | ["derived"] | [derived:"/"] )*;
    

  /** ASTCardinality represents a Cardinality in a Classdiagram
    @attribute many          True if "*" is set as Cardinality
    @attribute one           True if [1] is set as Cardinality
    @attribute oneToMany     True if [1..*] is set as Cardinality
    @attribute optional      True if [0..1] is set as Cardinality
  */
  Cardinality = many:["[*]"] | one:["[1]"] | oneToMany:["[1..*]"] | optional:["[0..1]"];
   

  /** ASTQualifier represents a Qualifier of an Association
    @attribute name     Abstract name of the Qualifier if not a type
    @attribute mctype     Type of the Qualifier if not an abstract name
  */
  symbol CDQualifier = "[[" Name "]]" | "[" MCType "]";
    

  /** ASTStereotype represents Stereotypes in a Classdiagram
    @attribute values List of Values of this Stereotype
  */
  CDStereotype = "<<" value:(CDStereoValue || ",")+ ">" ">"
	// It is not possible to define ">>".
    // Parsing generic typs like "List<List<String>>" leads to problems.
    {((_input.LT(-2).getLine()==_input.LT(-1).getLine()) && (_input.LT(-1).getCharPositionInLine()==_input.LT(-2).getCharPositionInLine()+1))}?;


  /** ASTStereoValue represents a Value of a Stereotype in a Classdiagram
      @attribute name  Name of the Stereotype-Value
  */
  CDStereoValue = Name ("=" value:String)?;

  /** ASTValue represents a Value
      @attribute literal  Value
  */
  Value = SignedLiteral;

  symbolrule CDField =
    isPrivate: boolean
    isDerived: boolean
    isProtected: boolean
    isPublic: boolean
    isFinal: boolean
    isStatic: boolean
    isReadOnly: boolean
    isInitialized: boolean
    isParameter: boolean
    type: de.monticore.cd.cd4analysis._symboltable.CDTypeSymbolReference
  ;

  symbolrule CDMethOrConstr =
    isConstructor: boolean
    isPrivate: boolean
    isDerived: boolean
    isProtected: boolean
    isPublic: boolean
    isFinal: boolean
    isStatic: boolean
    isAbstract: boolean
    isEllipsis: boolean
    returnType: de.monticore.cd.cd4analysis._symboltable.CDTypeSymbolReference
    exceptions: de.monticore.cd.cd4analysis._symboltable.CDTypeSymbolReference*
  ;

  symbolrule CDType =
    isInterface: boolean
    isEnum: boolean
    isClass: boolean
    isAbstract: boolean
    isPrivate: boolean
    isProtected: boolean
    isPublic: boolean
    isFinal: boolean
    cdInterfaces: de.monticore.cd.cd4analysis._symboltable.CDTypeSymbolReference*
    superClass: de.monticore.cd.cd4analysis._symboltable.CDTypeSymbolReference?
  ;

}
