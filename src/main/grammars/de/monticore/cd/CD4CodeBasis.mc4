/* (c) https://github.com/MontiCore/monticore */

package de.monticore.cd;

/*
   MCG for CD 4 Code Basis, Version 27/04/2020
*/

component grammar CD4CodeBasis extends de.monticore.cd.CDBasis {

  /* ==== Methods ==== */
  interface symbol scope CDMethodType extends CDMember, Method = Name;

  CDThrowsDeclaration = "throws" exception:(MCQualifiedName || ",")+;

  CDMethod implements CDMethodType =
    CDModifier
    MCReturnType
    Name "(" (CDParameter || ",")* ")"
    (CDThrowsDeclaration)?
    ";";

  CDConstructor implements CDMethodType =
    CDModifier
    Name "(" (CDParameter || ",")* ")"
    (CDThrowsDeclaration)?
    ";";

  symbol CDParameter implements Field =
    MCType (Ellipsis:["..."])? Name ("=" defaultValue:Expression)?;

  /* ==== Modifier ==== */
  CD4CodePrivateModifier implements CDDirectModifier = "private" | "-";
  CD4CodeProtectedModifier implements CDDirectModifier = "protected" | "#";
  CD4CodePublicModifier implements CDDirectModifier = "public" | "+";
  CD4CodeDerivedModifier implements CDDirectModifier = key("derived") | "/";
  CD4CodeReadOnlyModifier implements CDDirectModifier = key("read-only");


  /* ==== Symbols ==== */
  symbolrule CDMethodType =
    isConstructor: boolean
    hasEllipsis: boolean
    exceptions: de.monticore.types.typesymbols._symboltable.TypeSymbol*
    modifier: de.monticore.cd.cd4codebasis._symboltable.SymModifier
  ;

  symbolrule CDParameter =
    isEllipsis: boolean
    defaultValue: Optional<de.monticore.types.check.SymTypeExpression>
  ;
}
