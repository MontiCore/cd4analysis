package de.cd4analysis;

/*
   MCG for CD 4 Analysis, Version August 17th, 2014
*/

grammar CD4Analysis extends de.monticore.types.Types {

 CDCompilationUnit =
 	("package" Package:(Name& || ".")* ";")? 
  	(ImportStatements:MCImportStatement)*
  	CDDefinition;


 CDDefinition = "classdiagram" Name "{"
    (   cDClasses:CDClass
      | cDInterfaces:CDInterface
      | cDEnums:CDEnum
      | cDAssociations:CDAssociation)* "}";
  
  CDClass = Modifier?  "class" Name
    ( "extends"  superclasses:ReferenceType)?
    ( "implements" interfaces:ReferenceType
              ("," interfaces:ReferenceType)* )?
    ( "{" cDAttributes:CDAttribute* "}" | ";" );
  
  CDInterface = "interface" Name
    ( "extends" interfaces:ReferenceType
           ("," interfaces:ReferenceType)* )?  ";";
  
  CDEnum = "enum" Name
    ( "implements" interfaces:ReferenceType
              ("," interfaces:ReferenceType)* )?
    ( "{" (    cDEnumConstants:CDEnumConstant
          ("," cDEnumConstants:CDEnumConstant)* ";")?
      "}" | ";" );
  
  CDEnumConstant = Name;
  
  CDAttribute = Modifier?  Type Name ("=" Value)? ";";
  
  CDAssociation = Stereotype? 
    (   association:["association"]
      | composition:["composition"])
    (Derived:[DERIVED:"/"])?  Name?
    leftModifier:Modifier?
    leftCardinality:Cardinality?
    leftReferenceName:QualifiedName
    ("[" leftQualifier:CDQualifier "]")?
    ("(" leftRole:Name ")")?
    (   leftToRight:["->"]
      | rightToLeft:["<-"]
      | bidirectional:["<->"]
      | simple:["--"] )
    ("(" rightRole:Name ")")?
    ("[" rightQualifier:CDQualifier "]")?
    rightReferenceName:QualifiedName
    rightCardinality:Cardinality?
    rightModifier:Modifier ";" ;
  
  Modifier = Stereotype?
    (["abstract"]
      | Derived:["derived"] | Derived:[DERIVED:"/"] )*;
    
  Cardinality =
    "[" ( many:[foo:"*"]
          | lowerBoundLit:IntLiteral
            (".." (upperBoundLit:IntLiteral | noUpperLimit:["*"]) )?
    )"]";
   
  CDQualifier = Name | Type;
  
  Stereotype = "<<" values:StereoValue ("," values:StereoValue)* ">>";
  
  StereoValue = Name;
  
  QualifiedName = parts:Name ("." parts:Name)*;
  
  Value = Literal;
}
