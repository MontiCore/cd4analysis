package de.cd4analysis;

/*
   MCG for CD 4 Analysis, Version August 17th, 2014
*/

grammar CD4Analysis extends de.monticore.types.Types {

 CDCompilationUnit =
 	("package" Package:(Name& || ".")* ";")? 
  	(ImportStatements:ImportStatement)*
  	CDDefinition;


 CDDefinition = "classdiagram" Name "{"
    (   cDClasses:CDClass
      | cDInterfaces:CDInterface
      | cDEnums:CDEnum
      | cDAssociations:CDAssociation)* "}";
  
  CDClass = Modifier?  "class" Name
    ( "extends"  superclasses:ReferenceType)?
    ( "implements" interfaces:(ReferenceType || ",")* )?
    ( "{" cDAttributes:CDAttribute* "}" | ";" );
  
  CDInterface = "interface" Name
    ( "extends" interfaces:(ReferenceType || ",")* )?  ";";
  
  CDEnum = "enum" Name
    ( "implements" interfaces:(ReferenceType || ",")* )?
    ( "{" ( cDEnumConstants:(CDEnumConstant || ",")* ";")?
      "}" | ";" );
  
  CDEnumConstant = Name;
  
  CDAttribute = Modifier?  Type Name ("=" Value)? ";";
  
  CDAssociation = Stereotype? 
    (["association"] | ["composition"])
    (Derived:[DERIVED:"/"])?  Name?
    leftModifier:Modifier?
    leftCardinality:Cardinality?
    leftReferenceName:QualifiedName
    ("[" leftQualifier:CDQualifier "]")?
    ("(" leftRole:Name ")")?
    (   leftToRight:["->"]
      | rightToLeft:["<-"]
      | bidirectional:["<->"]
      | simple:["--"] )
    ("(" rightRole:Name ")")?
    ("[" rightQualifier:CDQualifier "]")?
    rightReferenceName:QualifiedName
    rightCardinality:Cardinality?
    rightModifier:Modifier ";" ;
  
  Modifier = Stereotype?
    (["abstract"]
      | ["final"]
      | ["static"]
      | Private:["private"] | Private:[PRIVATE:"-"]  // TODO: Vereinfachung (Bug)
      | Protected:["protected"] | Protected:[PROTECTED:"#"]
      | Public:["public"] | Public:[PUBLIC:"+"]
      | Derived:["derived"] | Derived:[DERIVED:"/"] )*;
    
  Cardinality = many:["[*]"] | one:["[1]"] | oneToMany:["[1..*]"] | optional:["[0..1]"];
   
  CDQualifier = Name | Type;
  
  Stereotype = "<<" values:(StereoValue || ",")* ">>";
  
  StereoValue = Name;
  
  QualifiedName = parts:(Name || ".")*;
  
  Value = Literal;
}
