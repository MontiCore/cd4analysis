/* generated from model CDInterfaceAndEnum */
/* generated by template core.Class*/

/* (c) https://github.com/MontiCore/monticore */
package de.monticore.cdinterfaceandenum._symboltable.phased;

/* generated by template core.Imports*/

import de.monticore.cdbasis._symboltable.CDTypeSymbolBuilder;
import de.monticore.cdinterfaceandenum.CDInterfaceAndEnumMill;
import de.monticore.cdinterfaceandenum._symboltable.ICDInterfaceAndEnumArtifactScope;
import de.monticore.cdinterfaceandenum._symboltable.ICDInterfaceAndEnumScope;
import de.monticore.symbols.oosymbols._symboltable.FieldSymbolBuilder;
import de.se_rwth.commons.logging.Log;

import java.util.ArrayDeque;
import java.util.ArrayList;
import java.util.Deque;
import java.util.Optional;

abstract  public   class CDInterfaceAndEnumScopeSkeletonsCreatorTOP implements de.monticore.cdinterfaceandenum._visitor.CDInterfaceAndEnumVisitor {

   /* generated by template core.Attribute*/
protected  Deque<ICDInterfaceAndEnumScope> scopeStack = new ArrayDeque<>();

   /* generated by template core.Attribute*/
private  de.monticore.cdinterfaceandenum._visitor.CDInterfaceAndEnumVisitor realThis = this;

   /* generated by template core.Attribute*/
protected  ICDInterfaceAndEnumScope firstCreatedScope ;


   /* generated by template core.Constructor*/
public CDInterfaceAndEnumScopeSkeletonsCreatorTOP(ICDInterfaceAndEnumScope enclosingScope)  {
   putOnStack(Log.errorIfNull(enclosingScope));
}

   /* generated by template core.Constructor*/
public CDInterfaceAndEnumScopeSkeletonsCreatorTOP(Deque<? extends ICDInterfaceAndEnumScope> scopeStack)  {
   this.scopeStack = Log.errorIfNull((Deque<ICDInterfaceAndEnumScope>)scopeStack);
}


   /* generated by template core.Method*/
public  de.monticore.cdinterfaceandenum._visitor.CDInterfaceAndEnumVisitor getRealThis ()  {
     /* generated by template methods.Get*/

return this.realThis;

}

   /* generated by template core.Method*/
public  void setRealThis (de.monticore.cdinterfaceandenum._visitor.CDInterfaceAndEnumVisitor realThis)  {
     /* generated by template methods.Set*/

this.realThis = realThis;

}

   /* generated by template core.Method*/
public  ICDInterfaceAndEnumScope getFirstCreatedScope ()  {
     /* generated by template methods.Get*/

return this.firstCreatedScope;

}

   /* generated by template core.Method*/
public ICDInterfaceAndEnumArtifactScope createFromAST (de.monticore.cdinterfaceandenum._ast.ASTCDInterface rootNode)  {
     /* generated by template _symboltable.symboltablecreator.CreateFromAST*/

 Log.errorIfNull(rootNode, "0xA7004x1005541155 Error by creating of the CDInterfaceAndEnumSymbolTableCreator symbol table: top ast node is null");
 ICDInterfaceAndEnumArtifactScope artifactScope = de.monticore.cdinterfaceandenum.CDInterfaceAndEnumMill.artifactScope();
 artifactScope.setPackageName("");
 artifactScope.setImportsList(new ArrayList<>());
 putOnStack(artifactScope);
 rootNode.accept(getRealThis());
 return artifactScope;
}

   /* generated by template core.Method*/
public  void putOnStack (ICDInterfaceAndEnumScope scope)  {
     /* generated by template _symboltable.symboltablecreator.PutOnStack*/
 Log.errorIfNull(scope);

if (scope.getEnclosingScope() == null && getCurrentScope().isPresent()) {
   scope.setEnclosingScope(getCurrentScope().get());
   getCurrentScope().get().addSubScope(scope);
} else if (scope.getEnclosingScope() != null && getCurrentScope().isPresent()) {
   if (scope.getEnclosingScope() != getCurrentScope().get()) {
     Log.warn("0xA1043 The enclosing scope is not the same as the current scope on the stack.");
   }
 }

 if (firstCreatedScope == null) {
   firstCreatedScope = scope;
 }

 scopeStack.addLast(scope);
}

   /* generated by template core.Method*/
public  final  Optional<ICDInterfaceAndEnumScope> getCurrentScope ()  {
     return Optional.ofNullable(scopeStack.peekLast());
}

   /* generated by template core.Method*/
public  final  Optional<ICDInterfaceAndEnumScope> removeCurrentScope ()  {
     return Optional.ofNullable(scopeStack.pollLast());
}

   /* generated by template core.Method*/
protected  void setCDInterfaceScopeStack (Deque<ICDInterfaceAndEnumScope> scopeStack)  {
     this.scopeStack = scopeStack;
}

   /* generated by template core.Method*/
public  ICDInterfaceAndEnumScope createScope (boolean shadowing)  {
     /* generated by template _symboltable.symboltablecreator.CreateScope*/

 ICDInterfaceAndEnumScope scope = de.monticore.cdinterfaceandenum.CDInterfaceAndEnumMill.scope();
 scope.setShadowing(shadowing);
 return scope;
}

   /* generated by template core.Method*/
public  void visit (de.monticore.cdinterfaceandenum._ast.ASTCDEnumConstant node)  {
     /* generated by template _symboltable.symboltablecreator.Visit4STC*/

 de.monticore.symbols.oosymbols._symboltable.FieldSymbol symbol = create_CDEnumConstant(node).build();
 addToScopeAndLinkWithNode(symbol, node);
}

   /* generated by template core.Method*/
public  void endVisit (de.monticore.cdinterfaceandenum._ast.ASTCDEnumConstant node)  {
     /* generated by template _symboltable.symboltablecreator.EndVisitSymbol*/

}

   /* generated by template core.Method*/
protected  de.monticore.symbols.oosymbols._symboltable.FieldSymbolBuilder create_CDEnumConstant (de.monticore.cdinterfaceandenum._ast.ASTCDEnumConstant ast)  {
  final FieldSymbolBuilder fieldSymbolBuilder = CDInterfaceAndEnumMill.fieldSymbolBuilder().setName(ast.getName());
  initialize_CDEnumConstant(fieldSymbolBuilder, ast);
  return fieldSymbolBuilder;
}

   /* generated by template core.Method*/
protected  void initialize_CDEnumConstant (de.monticore.symbols.oosymbols._symboltable.FieldSymbolBuilder symbol,de.monticore.cdinterfaceandenum._ast.ASTCDEnumConstant ast)  {
     /* generated by template core.EmptyBody*/
// empty body

}

   /* generated by template core.Method*/
public  void addToScopeAndLinkWithNode (de.monticore.symbols.oosymbols._symboltable.FieldSymbol symbol,de.monticore.cdinterfaceandenum._ast.ASTCDEnumConstant ast)  {
     /* generated by template _symboltable.symboltablecreator.AddToScopeAndLinkWithNode*/

 addToScope(symbol);
 setLinkBetweenSymbolAndNode(symbol, ast);
}

   /* generated by template core.Method*/
public  void setLinkBetweenSymbolAndNode (de.monticore.symbols.oosymbols._symboltable.FieldSymbol symbol,de.monticore.cdinterfaceandenum._ast.ASTCDEnumConstant ast)  {
     /* generated by template _symboltable.symboltablecreator.SetLinkBetweenSymbolAndNode*/

 // symbol -> ast
 symbol.setAstNode(ast);

 // ast -> symbol
 ast.setSymbol(symbol);
 ast.setEnclosingScope(symbol.getEnclosingScope());


}

   /* generated by template core.Method*/
public  void visit (de.monticore.cdinterfaceandenum._ast.ASTCDInterface node)  {
     /* generated by template _symboltable.symboltablecreator.Visit4STC*/

 de.monticore.cdbasis._symboltable.CDTypeSymbol symbol = create_CDInterface(node).build();
 addToScopeAndLinkWithNode(symbol, node);
}

   /* generated by template core.Method*/
public  void endVisit (de.monticore.cdinterfaceandenum._ast.ASTCDInterface node)  {
     /* generated by template _symboltable.symboltablecreator.EndVisitSymbol*/
removeCurrentScope();

}

   /* generated by template core.Method*/
protected  de.monticore.cdbasis._symboltable.CDTypeSymbolBuilder create_CDInterface (de.monticore.cdinterfaceandenum._ast.ASTCDInterface ast)  {
  final CDTypeSymbolBuilder cdTypeSymbolBuilder = CDInterfaceAndEnumMill.cDTypeSymbolBuilder().setName(ast.getName());
  initialize_CDInterface(cdTypeSymbolBuilder, ast);
  return cdTypeSymbolBuilder;
}

   /* generated by template core.Method*/
protected  void initialize_CDInterface (de.monticore.cdbasis._symboltable.CDTypeSymbolBuilder symbol,de.monticore.cdinterfaceandenum._ast.ASTCDInterface ast)  {
     /* generated by template core.EmptyBody*/
// empty body

}

   /* generated by template core.Method*/
public  void addToScopeAndLinkWithNode (de.monticore.cdbasis._symboltable.CDTypeSymbol symbol,de.monticore.cdinterfaceandenum._ast.ASTCDInterface ast)  {
     /* generated by template _symboltable.symboltablecreator.AddToScopeAndLinkWithNode*/

 addToScope(symbol);
   ICDInterfaceAndEnumScope scope = createScope(false);
 putOnStack(scope);
 symbol.setSpannedScope(scope);
 setLinkBetweenSymbolAndNode(symbol, ast);
}

   /* generated by template core.Method*/
public  void setLinkBetweenSymbolAndNode (de.monticore.cdbasis._symboltable.CDTypeSymbol symbol,de.monticore.cdinterfaceandenum._ast.ASTCDInterface ast)  {
     /* generated by template _symboltable.symboltablecreator.SetLinkBetweenSymbolAndNode*/

 // symbol -> ast
 symbol.setAstNode(ast);

 // ast -> symbol
 ast.setSymbol(symbol);
 ast.setEnclosingScope(symbol.getEnclosingScope());

 // ast -> spannedScope
 ast.setSpannedScope(symbol.getSpannedScope());

}

   /* generated by template core.Method*/
public  void setLinkBetweenSpannedScopeAndNode (ICDInterfaceAndEnumScope scope,de.monticore.cdinterfaceandenum._ast.ASTCDInterface ast)  {
     /* generated by template _symboltable.symboltablecreator.SetLinkBetweenSpannedScopeAndNode*/
 // scope -> ast
 scope.setAstNode(ast);

 // ast -> scope
 ast.setSpannedScope(scope);
}

   /* generated by template core.Method*/
public  void visit (de.monticore.cdinterfaceandenum._ast.ASTCDEnum node)  {
     /* generated by template _symboltable.symboltablecreator.Visit4STC*/

 de.monticore.cdbasis._symboltable.CDTypeSymbol symbol = create_CDEnum(node).build();
 addToScopeAndLinkWithNode(symbol, node);
}

   /* generated by template core.Method*/
public  void endVisit (de.monticore.cdinterfaceandenum._ast.ASTCDEnum node)  {
     /* generated by template _symboltable.symboltablecreator.EndVisitSymbol*/

removeCurrentScope();

}

   /* generated by template core.Method*/
protected  de.monticore.cdbasis._symboltable.CDTypeSymbolBuilder create_CDEnum (de.monticore.cdinterfaceandenum._ast.ASTCDEnum ast)  {
  final CDTypeSymbolBuilder cdTypeSymbolBuilder = CDInterfaceAndEnumMill.cDTypeSymbolBuilder().setName(ast.getName());
  initialize_CDEnum(cdTypeSymbolBuilder, ast);
  return cdTypeSymbolBuilder;
}

   /* generated by template core.Method*/
protected  void initialize_CDEnum (de.monticore.cdbasis._symboltable.CDTypeSymbolBuilder symbol,de.monticore.cdinterfaceandenum._ast.ASTCDEnum ast)  {
     /* generated by template core.EmptyBody*/
// empty body

}

   /* generated by template core.Method*/
public  void addToScopeAndLinkWithNode (de.monticore.cdbasis._symboltable.CDTypeSymbol symbol,de.monticore.cdinterfaceandenum._ast.ASTCDEnum ast)  {
     /* generated by template _symboltable.symboltablecreator.AddToScopeAndLinkWithNode*/

 addToScope(symbol);
   ICDInterfaceAndEnumScope scope = createScope(false);
 putOnStack(scope);
 symbol.setSpannedScope(scope);
 setLinkBetweenSymbolAndNode(symbol, ast);
}

   /* generated by template core.Method*/
public  void setLinkBetweenSymbolAndNode (de.monticore.cdbasis._symboltable.CDTypeSymbol symbol,de.monticore.cdinterfaceandenum._ast.ASTCDEnum ast)  {
     /* generated by template _symboltable.symboltablecreator.SetLinkBetweenSymbolAndNode*/

 // symbol -> ast
 symbol.setAstNode(ast);

 // ast -> symbol
 ast.setSymbol(symbol);
 ast.setEnclosingScope(symbol.getEnclosingScope());

 // ast -> spannedScope
 ast.setSpannedScope(symbol.getSpannedScope());

}

   /* generated by template core.Method*/
public  void setLinkBetweenSpannedScopeAndNode (ICDInterfaceAndEnumScope scope,de.monticore.cdinterfaceandenum._ast.ASTCDEnum ast)  {
     /* generated by template _symboltable.symboltablecreator.SetLinkBetweenSpannedScopeAndNode*/
 // scope -> ast
 scope.setAstNode(ast);

 // ast -> scope
 ast.setSpannedScope(scope);
}

   /* generated by template core.Method*/
public  void addToScope (de.monticore.cdbasis._symboltable.CDPackageSymbol symbol)  {
     /* generated by template _symboltable.symboltablecreator.AddToScope*/

if (getCurrentScope().isPresent()) {
   getCurrentScope().get().add(symbol);
 } else {
   Log.warn("0xA50212 Symbol cannot be added to current scope, since no scope exists.");
 }

}

   /* generated by template core.Method*/
public  void addToScope (de.monticore.cdbasis._symboltable.CDTypeSymbol symbol)  {
     /* generated by template _symboltable.symboltablecreator.AddToScope*/

 addToScope((de.monticore.symbols.oosymbols._symboltable.OOTypeSymbol) symbol);
if (getCurrentScope().isPresent()) {
   getCurrentScope().get().add(symbol);
 } else {
   Log.warn("0xA50212 Symbol cannot be added to current scope, since no scope exists.");
 }

}

   /* generated by template core.Method*/
public  void addToScope (de.monticore.symbols.oosymbols._symboltable.OOTypeSymbol symbol)  {
     /* generated by template _symboltable.symboltablecreator.AddToScope*/

 addToScope((de.monticore.symbols.basicsymbols._symboltable.TypeSymbol) symbol);
if (getCurrentScope().isPresent()) {
   getCurrentScope().get().add(symbol);
 } else {
   Log.warn("0xA50212 Symbol cannot be added to current scope, since no scope exists.");
 }

}

   /* generated by template core.Method*/
public  void addToScope (de.monticore.symbols.oosymbols._symboltable.FieldSymbol symbol)  {
     /* generated by template _symboltable.symboltablecreator.AddToScope*/

 addToScope((de.monticore.symbols.basicsymbols._symboltable.VariableSymbol) symbol);
if (getCurrentScope().isPresent()) {
   getCurrentScope().get().add(symbol);
 } else {
   Log.warn("0xA50212 Symbol cannot be added to current scope, since no scope exists.");
 }

}

   /* generated by template core.Method*/
public  void addToScope (de.monticore.symbols.oosymbols._symboltable.MethodSymbol symbol)  {
     /* generated by template _symboltable.symboltablecreator.AddToScope*/

 addToScope((de.monticore.symbols.basicsymbols._symboltable.FunctionSymbol) symbol);
if (getCurrentScope().isPresent()) {
   getCurrentScope().get().add(symbol);
 } else {
   Log.warn("0xA50212 Symbol cannot be added to current scope, since no scope exists.");
 }

}

   /* generated by template core.Method*/
public  void addToScope (de.monticore.symbols.basicsymbols._symboltable.DiagramSymbol symbol)  {
     /* generated by template _symboltable.symboltablecreator.AddToScope*/

if (getCurrentScope().isPresent()) {
   getCurrentScope().get().add(symbol);
 } else {
   Log.warn("0xA50212 Symbol cannot be added to current scope, since no scope exists.");
 }

}

   /* generated by template core.Method*/
public  void addToScope (de.monticore.symbols.basicsymbols._symboltable.TypeSymbol symbol)  {
     /* generated by template _symboltable.symboltablecreator.AddToScope*/

if (getCurrentScope().isPresent()) {
   getCurrentScope().get().add(symbol);
 } else {
   Log.warn("0xA50212 Symbol cannot be added to current scope, since no scope exists.");
 }

}

   /* generated by template core.Method*/
public  void addToScope (de.monticore.symbols.basicsymbols._symboltable.TypeVarSymbol symbol)  {
     /* generated by template _symboltable.symboltablecreator.AddToScope*/

 addToScope((de.monticore.symbols.basicsymbols._symboltable.TypeSymbol) symbol);
if (getCurrentScope().isPresent()) {
   getCurrentScope().get().add(symbol);
 } else {
   Log.warn("0xA50212 Symbol cannot be added to current scope, since no scope exists.");
 }

}

   /* generated by template core.Method*/
public  void addToScope (de.monticore.symbols.basicsymbols._symboltable.VariableSymbol symbol)  {
     /* generated by template _symboltable.symboltablecreator.AddToScope*/

if (getCurrentScope().isPresent()) {
   getCurrentScope().get().add(symbol);
 } else {
   Log.warn("0xA50212 Symbol cannot be added to current scope, since no scope exists.");
 }

}

   /* generated by template core.Method*/
public  void addToScope (de.monticore.symbols.basicsymbols._symboltable.FunctionSymbol symbol)  {
     /* generated by template _symboltable.symboltablecreator.AddToScope*/

if (getCurrentScope().isPresent()) {
   getCurrentScope().get().add(symbol);
 } else {
   Log.warn("0xA50212 Symbol cannot be added to current scope, since no scope exists.");
 }

}

}
