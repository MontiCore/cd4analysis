/* generated from model CDAssociation */
/* generated by template core.Class*/

/* (c) https://github.com/MontiCore/monticore */
package de.monticore.cdassociation._symboltable.phased;

/* generated by template core.Imports*/

import de.monticore.cdassociation.CDAssociationMill;
import de.monticore.cdassociation._symboltable.*;
import de.se_rwth.commons.logging.Log;

import java.util.ArrayDeque;
import java.util.ArrayList;
import java.util.Deque;
import java.util.Optional;

abstract  public   class CDAssociationScopeSkeletonsCreatorTOP implements de.monticore.cdassociation._visitor.CDAssociationVisitor {

   /* generated by template core.Attribute*/
protected  Deque<ICDAssociationScope> scopeStack = new ArrayDeque<>();

   /* generated by template core.Attribute*/
private  de.monticore.cdassociation._visitor.CDAssociationVisitor realThis = this;

   /* generated by template core.Attribute*/
protected  ICDAssociationScope firstCreatedScope ;


   /* generated by template core.Constructor*/
public CDAssociationScopeSkeletonsCreatorTOP(ICDAssociationScope enclosingScope)  {
   putOnStack(Log.errorIfNull(enclosingScope));
}

   /* generated by template core.Constructor*/
public CDAssociationScopeSkeletonsCreatorTOP(Deque<? extends ICDAssociationScope> scopeStack)  {
   this.scopeStack = Log.errorIfNull((Deque<ICDAssociationScope>)scopeStack);
}


   /* generated by template core.Method*/
public  de.monticore.cdassociation._visitor.CDAssociationVisitor getRealThis ()  {
     /* generated by template methods.Get*/

return this.realThis;

}

   /* generated by template core.Method*/
public  void setRealThis (de.monticore.cdassociation._visitor.CDAssociationVisitor realThis)  {
     /* generated by template methods.Set*/

this.realThis = realThis;

}

   /* generated by template core.Method*/
public  ICDAssociationScope getFirstCreatedScope ()  {
     /* generated by template methods.Get*/

return this.firstCreatedScope;

}

   /* generated by template core.Method*/
public ICDAssociationArtifactScope createFromAST (de.monticore.cdassociation._ast.ASTCDAssocType rootNode)  {
     /* generated by template _symboltable.symboltablecreator.CreateFromAST*/

 Log.errorIfNull(rootNode, "0xA7004x2008504818 Error by creating of the CDAssociationSymbolTableCreator symbol table: top ast node is null");
 ICDAssociationArtifactScope artifactScope = de.monticore.cdassociation.CDAssociationMill.cDAssociationArtifactScopeBuilder()
   .setPackageName("")
   .setImportsList(new ArrayList<>())
   .build();
 putOnStack(artifactScope);
 rootNode.accept(getRealThis());
 return artifactScope;
}

   /* generated by template core.Method*/
public  void putOnStack (ICDAssociationScope scope)  {
     /* generated by template _symboltable.symboltablecreator.PutOnStack*/
 Log.errorIfNull(scope);

if (scope.getEnclosingScope() == null && getCurrentScope().isPresent()) {
   scope.setEnclosingScope(getCurrentScope().get());
   getCurrentScope().get().addSubScope(scope);
} else if (scope.getEnclosingScope() != null && getCurrentScope().isPresent()) {
   if (scope.getEnclosingScope() != getCurrentScope().get()) {
     Log.warn("0xA1043 The enclosing scope is not the same as the current scope on the stack.");
   }
 }

 if (firstCreatedScope == null) {
   firstCreatedScope = scope;
 }

 scopeStack.addLast(scope);
}

   /* generated by template core.Method*/
public  final  Optional<ICDAssociationScope> getCurrentScope ()  {
     return Optional.ofNullable(scopeStack.peekLast());
}

   /* generated by template core.Method*/
public  final  Optional<ICDAssociationScope> removeCurrentScope ()  {
     return Optional.ofNullable(scopeStack.pollLast());
}

   /* generated by template core.Method*/
protected  void setCDAssocTypeScopeStack (Deque<ICDAssociationScope> scopeStack)  {
     this.scopeStack = scopeStack;
}

   /* generated by template core.Method*/
public  ICDAssociationScope createScope (boolean shadowing)  {
     /* generated by template _symboltable.symboltablecreator.CreateScope*/

 ICDAssociationScope scope = de.monticore.cdassociation.CDAssociationMill.cDAssociationScopeBuilder().build();
 scope.setShadowing(shadowing);
 return scope;
}

   /* generated by template core.Method*/
public  void visit (de.monticore.cdassociation._ast.ASTCDAssociation node)  {
     /* generated by template _symboltable.symboltablecreator.Visit4STC*/
 if(node.isPresentName()) {
   CDAssociationSymbol symbol = create_CDAssociation(node).build();
   addToScopeAndLinkWithNode(symbol, node);
 }
}

   /* generated by template core.Method*/
public  void endVisit (de.monticore.cdassociation._ast.ASTCDAssociation node)  {
     /* generated by template _symboltable.symboltablecreator.EndVisitSymbol*/

removeCurrentScope();

}

   /* generated by template core.Method*/
protected  CDAssociationSymbolBuilder create_CDAssociation (de.monticore.cdassociation._ast.ASTCDAssociation ast)  {
  final CDAssociationSymbolBuilder cdAssociationSymbolBuilder = CDAssociationMill.cDAssociationSymbolBuilder().setName(ast.getName());
  initialize_CDAssociation(cdAssociationSymbolBuilder, ast);
  return cdAssociationSymbolBuilder;
}

   /* generated by template core.Method*/
protected  void initialize_CDAssociation (CDAssociationSymbolBuilder symbol,de.monticore.cdassociation._ast.ASTCDAssociation ast)  {
     /* generated by template core.EmptyBody*/
// empty body

}

   /* generated by template core.Method*/
public  void addToScopeAndLinkWithNode (CDAssociationSymbol symbol,de.monticore.cdassociation._ast.ASTCDAssociation ast)  {
     /* generated by template _symboltable.symboltablecreator.AddToScopeAndLinkWithNode*/

 addToScope(symbol);
   ICDAssociationScope scope = createScope(false);
 putOnStack(scope);
 symbol.setSpannedScope(scope);
 setLinkBetweenSymbolAndNode(symbol, ast);
}

   /* generated by template core.Method*/
public  void setLinkBetweenSymbolAndNode (CDAssociationSymbol symbol,de.monticore.cdassociation._ast.ASTCDAssociation ast)  {
     /* generated by template _symboltable.symboltablecreator.SetLinkBetweenSymbolAndNode*/

 // symbol -> ast
 symbol.setAstNode(ast);

 // ast -> symbol
 ast.setSymbol(symbol);
 ast.setEnclosingScope(symbol.getEnclosingScope());

 // ast -> spannedScope
 ast.setSpannedScope(symbol.getSpannedScope());

}

   /* generated by template core.Method*/
public  void setLinkBetweenSpannedScopeAndNode (ICDAssociationScope scope,de.monticore.cdassociation._ast.ASTCDAssociation ast)  {
     /* generated by template _symboltable.symboltablecreator.SetLinkBetweenSpannedScopeAndNode*/
 // scope -> ast
 scope.setAstNode(ast);

 // ast -> scope
 ast.setSpannedScope(scope);
}

   /* generated by template core.Method*/
public  void visit (de.monticore.cdassociation._ast.ASTCDRole node)  {
     /* generated by template _symboltable.symboltablecreator.Visit4STC*/

    CDRoleSymbol symbol = create_CDRole(node).build();
    addToScopeAndLinkWithNode(symbol, node);
}

   /* generated by template core.Method*/
public  void endVisit (de.monticore.cdassociation._ast.ASTCDRole node)  {
     /* generated by template _symboltable.symboltablecreator.EndVisitSymbol*/

}

   /* generated by template core.Method*/
protected  CDRoleSymbolBuilder create_CDRole (de.monticore.cdassociation._ast.ASTCDRole ast)  {
  final CDRoleSymbolBuilder cdRoleSymbolBuilder = CDAssociationMill.cDRoleSymbolBuilder().setName(ast.getName());
  initialize_CDRole(cdRoleSymbolBuilder, ast);
  return cdRoleSymbolBuilder;
}

   /* generated by template core.Method*/
protected  void initialize_CDRole (CDRoleSymbolBuilder symbol,de.monticore.cdassociation._ast.ASTCDRole ast)  {
     /* generated by template core.EmptyBody*/
// empty body

}

   /* generated by template core.Method*/
public  void addToScopeAndLinkWithNode (CDRoleSymbol symbol,de.monticore.cdassociation._ast.ASTCDRole ast)  {
     /* generated by template _symboltable.symboltablecreator.AddToScopeAndLinkWithNode*/

 addToScope(symbol);
 setLinkBetweenSymbolAndNode(symbol, ast);
}

   /* generated by template core.Method*/
public  void setLinkBetweenSymbolAndNode (CDRoleSymbol symbol,de.monticore.cdassociation._ast.ASTCDRole ast)  {
     /* generated by template _symboltable.symboltablecreator.SetLinkBetweenSymbolAndNode*/

 // symbol -> ast
 symbol.setAstNode(ast);

 // ast -> symbol
 ast.setSymbol(symbol);
 ast.setEnclosingScope(symbol.getEnclosingScope());


}

   /* generated by template core.Method*/
public  void visit (de.monticore.cdassociation._ast.ASTCDAssocTypeAssoc node)  {
     /* generated by template _symboltable.symboltablecreator.VisitNoSymbol*/
 if (getCurrentScope().isPresent()) {
   node.setEnclosingScope(getCurrentScope().get());
 }
 else {
   Log.error("Could not set enclosing scope of ASTNode \"" + node
             + "\", because no scope is set yet!");
 }
}

   /* generated by template core.Method*/
public  void visit (de.monticore.cdassociation._ast.ASTCDAssocTypeComp node)  {
     /* generated by template _symboltable.symboltablecreator.VisitNoSymbol*/
 if (getCurrentScope().isPresent()) {
   node.setEnclosingScope(getCurrentScope().get());
 }
 else {
   Log.error("Could not set enclosing scope of ASTNode \"" + node
             + "\", because no scope is set yet!");
 }
}

   /* generated by template core.Method*/
public  void visit (de.monticore.cdassociation._ast.ASTCDLeftToRightDir node)  {
     /* generated by template _symboltable.symboltablecreator.VisitNoSymbol*/
 if (getCurrentScope().isPresent()) {
   node.setEnclosingScope(getCurrentScope().get());
 }
 else {
   Log.error("Could not set enclosing scope of ASTNode \"" + node
             + "\", because no scope is set yet!");
 }
}

   /* generated by template core.Method*/
public  void visit (de.monticore.cdassociation._ast.ASTCDRightToLeftDir node)  {
     /* generated by template _symboltable.symboltablecreator.VisitNoSymbol*/
 if (getCurrentScope().isPresent()) {
   node.setEnclosingScope(getCurrentScope().get());
 }
 else {
   Log.error("Could not set enclosing scope of ASTNode \"" + node
             + "\", because no scope is set yet!");
 }
}

   /* generated by template core.Method*/
public  void visit (de.monticore.cdassociation._ast.ASTCDBiDir node)  {
     /* generated by template _symboltable.symboltablecreator.VisitNoSymbol*/
 if (getCurrentScope().isPresent()) {
   node.setEnclosingScope(getCurrentScope().get());
 }
 else {
   Log.error("Could not set enclosing scope of ASTNode \"" + node
             + "\", because no scope is set yet!");
 }
}

   /* generated by template core.Method*/
public  void visit (de.monticore.cdassociation._ast.ASTCDUnspecifiedDir node)  {
     /* generated by template _symboltable.symboltablecreator.VisitNoSymbol*/
 if (getCurrentScope().isPresent()) {
   node.setEnclosingScope(getCurrentScope().get());
 }
 else {
   Log.error("Could not set enclosing scope of ASTNode \"" + node
             + "\", because no scope is set yet!");
 }
}

   /* generated by template core.Method*/
public  void visit (de.monticore.cdassociation._ast.ASTCDOrdered node)  {
     /* generated by template _symboltable.symboltablecreator.VisitNoSymbol*/
 if (getCurrentScope().isPresent()) {
   node.setEnclosingScope(getCurrentScope().get());
 }
 else {
   Log.error("Could not set enclosing scope of ASTNode \"" + node
             + "\", because no scope is set yet!");
 }
}

   /* generated by template core.Method*/
public  void visit (de.monticore.cdassociation._ast.ASTCDAssocLeftSide node)  {
     /* generated by template _symboltable.symboltablecreator.VisitNoSymbol*/
 if (getCurrentScope().isPresent()) {
   node.setEnclosingScope(getCurrentScope().get());
 }
 else {
   Log.error("Could not set enclosing scope of ASTNode \"" + node
             + "\", because no scope is set yet!");
 }
}

   /* generated by template core.Method*/
public  void visit (de.monticore.cdassociation._ast.ASTCDAssocRightSide node)  {
     /* generated by template _symboltable.symboltablecreator.VisitNoSymbol*/
 if (getCurrentScope().isPresent()) {
   node.setEnclosingScope(getCurrentScope().get());
 }
 else {
   Log.error("Could not set enclosing scope of ASTNode \"" + node
             + "\", because no scope is set yet!");
 }
}

   /* generated by template core.Method*/
public  void visit (de.monticore.cdassociation._ast.ASTCDCardMult node)  {
     /* generated by template _symboltable.symboltablecreator.VisitNoSymbol*/
 if (getCurrentScope().isPresent()) {
   node.setEnclosingScope(getCurrentScope().get());
 }
 else {
   Log.error("Could not set enclosing scope of ASTNode \"" + node
             + "\", because no scope is set yet!");
 }
}

   /* generated by template core.Method*/
public  void visit (de.monticore.cdassociation._ast.ASTCDCardOne node)  {
     /* generated by template _symboltable.symboltablecreator.VisitNoSymbol*/
 if (getCurrentScope().isPresent()) {
   node.setEnclosingScope(getCurrentScope().get());
 }
 else {
   Log.error("Could not set enclosing scope of ASTNode \"" + node
             + "\", because no scope is set yet!");
 }
}

   /* generated by template core.Method*/
public  void visit (de.monticore.cdassociation._ast.ASTCDCardAtLeastOne node)  {
     /* generated by template _symboltable.symboltablecreator.VisitNoSymbol*/
 if (getCurrentScope().isPresent()) {
   node.setEnclosingScope(getCurrentScope().get());
 }
 else {
   Log.error("Could not set enclosing scope of ASTNode \"" + node
             + "\", because no scope is set yet!");
 }
}

   /* generated by template core.Method*/
public  void visit (de.monticore.cdassociation._ast.ASTCDCardOpt node)  {
     /* generated by template _symboltable.symboltablecreator.VisitNoSymbol*/
 if (getCurrentScope().isPresent()) {
   node.setEnclosingScope(getCurrentScope().get());
 }
 else {
   Log.error("Could not set enclosing scope of ASTNode \"" + node
             + "\", because no scope is set yet!");
 }
}

   /* generated by template core.Method*/
public  void visit (de.monticore.cdassociation._ast.ASTCDQualifier node)  {
     /* generated by template _symboltable.symboltablecreator.VisitNoSymbol*/
 if (getCurrentScope().isPresent()) {
   node.setEnclosingScope(getCurrentScope().get());
 }
 else {
   Log.error("Could not set enclosing scope of ASTNode \"" + node
             + "\", because no scope is set yet!");
 }
}

   /* generated by template core.Method*/
public  void visit (de.monticore.cdassociation._ast.ASTCDDirectComposition node)  {
     /* generated by template _symboltable.symboltablecreator.VisitNoSymbol*/
 if (getCurrentScope().isPresent()) {
   node.setEnclosingScope(getCurrentScope().get());
 }
 else {
   Log.error("Could not set enclosing scope of ASTNode \"" + node
             + "\", because no scope is set yet!");
 }
}

   /* generated by template core.Method*/
public  void addToScope (CDAssociationSymbol symbol)  {
     /* generated by template _symboltable.symboltablecreator.AddToScope*/

if (getCurrentScope().isPresent()) {
   getCurrentScope().get().add(symbol);
 } else {
   Log.warn("0xA50212 Symbol cannot be added to current scope, since no scope exists.");
 }

}

   /* generated by template core.Method*/
public  void addToScope (CDRoleSymbol symbol)  {
     /* generated by template _symboltable.symboltablecreator.AddToScope*/

 addToScope((de.monticore.symbols.oosymbols._symboltable.FieldSymbol) symbol);
if (getCurrentScope().isPresent()) {
   getCurrentScope().get().add(symbol);
 } else {
   Log.warn("0xA50212 Symbol cannot be added to current scope, since no scope exists.");
 }

}

   /* generated by template core.Method*/
public  void addToScope (de.monticore.cdbasis._symboltable.CDPackageSymbol symbol)  {
     /* generated by template _symboltable.symboltablecreator.AddToScope*/

if (getCurrentScope().isPresent()) {
   getCurrentScope().get().add(symbol);
 } else {
   Log.warn("0xA50212 Symbol cannot be added to current scope, since no scope exists.");
 }

}

   /* generated by template core.Method*/
public  void addToScope (de.monticore.cdbasis._symboltable.CDTypeSymbol symbol)  {
     /* generated by template _symboltable.symboltablecreator.AddToScope*/

 addToScope((de.monticore.symbols.oosymbols._symboltable.OOTypeSymbol) symbol);
if (getCurrentScope().isPresent()) {
   getCurrentScope().get().add(symbol);
 } else {
   Log.warn("0xA50212 Symbol cannot be added to current scope, since no scope exists.");
 }

}

   /* generated by template core.Method*/
public  void addToScope (de.monticore.symbols.oosymbols._symboltable.OOTypeSymbol symbol)  {
     /* generated by template _symboltable.symboltablecreator.AddToScope*/

 addToScope((de.monticore.symbols.basicsymbols._symboltable.TypeSymbol) symbol);
if (getCurrentScope().isPresent()) {
   getCurrentScope().get().add(symbol);
 } else {
   Log.warn("0xA50212 Symbol cannot be added to current scope, since no scope exists.");
 }

}

   /* generated by template core.Method*/
public  void addToScope (de.monticore.symbols.oosymbols._symboltable.FieldSymbol symbol)  {
     /* generated by template _symboltable.symboltablecreator.AddToScope*/

 addToScope((de.monticore.symbols.basicsymbols._symboltable.VariableSymbol) symbol);
if (getCurrentScope().isPresent()) {
   getCurrentScope().get().add(symbol);
 } else {
   Log.warn("0xA50212 Symbol cannot be added to current scope, since no scope exists.");
 }

}

   /* generated by template core.Method*/
public  void addToScope (de.monticore.symbols.oosymbols._symboltable.MethodSymbol symbol)  {
     /* generated by template _symboltable.symboltablecreator.AddToScope*/

 addToScope((de.monticore.symbols.basicsymbols._symboltable.FunctionSymbol) symbol);
if (getCurrentScope().isPresent()) {
   getCurrentScope().get().add(symbol);
 } else {
   Log.warn("0xA50212 Symbol cannot be added to current scope, since no scope exists.");
 }

}

   /* generated by template core.Method*/
public  void addToScope (de.monticore.symbols.basicsymbols._symboltable.DiagramSymbol symbol)  {
     /* generated by template _symboltable.symboltablecreator.AddToScope*/

if (getCurrentScope().isPresent()) {
   getCurrentScope().get().add(symbol);
 } else {
   Log.warn("0xA50212 Symbol cannot be added to current scope, since no scope exists.");
 }

}

   /* generated by template core.Method*/
public  void addToScope (de.monticore.symbols.basicsymbols._symboltable.TypeSymbol symbol)  {
     /* generated by template _symboltable.symboltablecreator.AddToScope*/

if (getCurrentScope().isPresent()) {
   getCurrentScope().get().add(symbol);
 } else {
   Log.warn("0xA50212 Symbol cannot be added to current scope, since no scope exists.");
 }

}

   /* generated by template core.Method*/
public  void addToScope (de.monticore.symbols.basicsymbols._symboltable.TypeVarSymbol symbol)  {
     /* generated by template _symboltable.symboltablecreator.AddToScope*/

 addToScope((de.monticore.symbols.basicsymbols._symboltable.TypeSymbol) symbol);
if (getCurrentScope().isPresent()) {
   getCurrentScope().get().add(symbol);
 } else {
   Log.warn("0xA50212 Symbol cannot be added to current scope, since no scope exists.");
 }

}

   /* generated by template core.Method*/
public  void addToScope (de.monticore.symbols.basicsymbols._symboltable.VariableSymbol symbol)  {
     /* generated by template _symboltable.symboltablecreator.AddToScope*/

if (getCurrentScope().isPresent()) {
   getCurrentScope().get().add(symbol);
 } else {
   Log.warn("0xA50212 Symbol cannot be added to current scope, since no scope exists.");
 }

}

   /* generated by template core.Method*/
public  void addToScope (de.monticore.symbols.basicsymbols._symboltable.FunctionSymbol symbol)  {
     /* generated by template _symboltable.symboltablecreator.AddToScope*/

if (getCurrentScope().isPresent()) {
   getCurrentScope().get().add(symbol);
 } else {
   Log.warn("0xA50212 Symbol cannot be added to current scope, since no scope exists.");
 }

}

}
