package de.monticore.cd4code._symboltable.phased;

import de.monticore.cd4code._symboltable.*;
import de.monticore.cdbasis._symboltable.phased.CDBasisScopeSkeletonCreator;
import de.monticore.cdinterfaceandenum._symboltable.phased.CDInterfaceAndEnumScopeSkeletonCreator;

import java.util.Deque;

public class CD4CodeScopeSkeletonCreatorDelegator
    extends de.monticore.cd4code._visitor.CD4CodeDelegatorVisitor {

  /* generated by template core.Attribute*/
  protected Deque<ICD4CodeScope> scopeStack = new java.util.ArrayDeque<>();

  /* generated by template core.Attribute*/
  protected final CD4CodeScopeSkeletonCreator symbolTable;

  /* generated by template core.Attribute*/
  protected de.monticore.cd4code._symboltable.ICD4CodeGlobalScope globalScope;

  /* generated by template core.Constructor*/
  public CD4CodeScopeSkeletonCreatorDelegator(de.monticore.cd4code._symboltable.ICD4CodeGlobalScope globalScope) {
    /* generated by template _symboltable.symboltablecreatordelegator.ConstructorSymbolTableCreatorDelegator*/

    this.scopeStack.push(globalScope);
    this.globalScope = globalScope;
    CD4AnalysisSTCForCD4Code cD4AnalysisSymbolTableCreator = new CD4AnalysisSTCForCD4Code(scopeStack);
    setCD4AnalysisVisitor(cD4AnalysisSymbolTableCreator);

    BitExpressionsSTCForCD4Code bitExpressionsSymbolTableCreator = new BitExpressionsSTCForCD4Code(scopeStack);
    setBitExpressionsVisitor(bitExpressionsSymbolTableCreator);

    CommonExpressionsSTCForCD4Code commonExpressionsSymbolTableCreator = new CommonExpressionsSTCForCD4Code(scopeStack);
    setCommonExpressionsVisitor(commonExpressionsSymbolTableCreator);

    MCFullGenericTypesSTCForCD4Code mCFullGenericTypesSymbolTableCreator = new MCFullGenericTypesSTCForCD4Code(scopeStack);
    setMCFullGenericTypesVisitor(mCFullGenericTypesSymbolTableCreator);

    MCLiteralsBasisSTCForCD4Code mCLiteralsBasisSymbolTableCreator = new MCLiteralsBasisSTCForCD4Code(scopeStack);
    setMCLiteralsBasisVisitor(mCLiteralsBasisSymbolTableCreator);

    MCBasicTypesSTCForCD4Code mCBasicTypesSymbolTableCreator = new MCBasicTypesSTCForCD4Code(scopeStack);
    setMCBasicTypesVisitor(mCBasicTypesSymbolTableCreator);

    CDInterfaceAndEnumScopeSkeletonCreator cDInterfaceAndEnumSymbolTableCreator = new CDInterfaceAndEnumScopeSkeletonCreatorForCD4Code(scopeStack);
    setCDInterfaceAndEnumVisitor(cDInterfaceAndEnumSymbolTableCreator);

    CDBasisScopeSkeletonCreator cDBasisSymbolTableCreator = new CDBasisScopeSkeletonCreatorForCD4Code(scopeStack); // changed
    setCDBasisVisitor(cDBasisSymbolTableCreator);

    BasicSymbolsSTCForCD4Code basicSymbolsSymbolTableCreator = new BasicSymbolsSTCForCD4Code(scopeStack);
    setBasicSymbolsVisitor(basicSymbolsSymbolTableCreator);

    ExpressionsBasisSTCForCD4Code expressionsBasisSymbolTableCreator = new ExpressionsBasisSTCForCD4Code(scopeStack);
    setExpressionsBasisVisitor(expressionsBasisSymbolTableCreator);

    UMLModifierSTCForCD4Code uMLModifierSymbolTableCreator = new UMLModifierSTCForCD4Code(scopeStack);
    setUMLModifierVisitor(uMLModifierSymbolTableCreator);

    MCCommonLiteralsSTCForCD4Code mCCommonLiteralsSymbolTableCreator = new MCCommonLiteralsSTCForCD4Code(scopeStack);
    setMCCommonLiteralsVisitor(mCCommonLiteralsSymbolTableCreator);

    CDAssociationScopeSkeletonCreatorForCD4Code cDAssociationSymbolTableCreator = new CDAssociationScopeSkeletonCreatorForCD4Code(scopeStack);
    setCDAssociationVisitor(cDAssociationSymbolTableCreator);

    MCSimpleGenericTypesSTCForCD4Code mCSimpleGenericTypesSymbolTableCreator = new MCSimpleGenericTypesSTCForCD4Code(scopeStack);
    setMCSimpleGenericTypesVisitor(mCSimpleGenericTypesSymbolTableCreator);

    MCCollectionTypesSTCForCD4Code mCCollectionTypesSymbolTableCreator = new MCCollectionTypesSTCForCD4Code(scopeStack);
    setMCCollectionTypesVisitor(mCCollectionTypesSymbolTableCreator);

    CD4CodeBasisScopeSkeletonCreatorForCD4Code cD4CodeBasisSymbolTableCreator = new CD4CodeBasisScopeSkeletonCreatorForCD4Code(scopeStack);
    setCD4CodeBasisVisitor(cD4CodeBasisSymbolTableCreator);

    OOSymbolsSTCForCD4Code oOSymbolsSymbolTableCreator = new OOSymbolsSTCForCD4Code(scopeStack);
    setOOSymbolsVisitor(oOSymbolsSymbolTableCreator);

    UMLStereotypeSTCForCD4Code uMLStereotypeSymbolTableCreator = new UMLStereotypeSTCForCD4Code(scopeStack);
    setUMLStereotypeVisitor(uMLStereotypeSymbolTableCreator);

    symbolTable = new CD4CodeScopeSkeletonCreator(scopeStack); // de.monticore.cd4code.CD4CodeMill.cD4CodeSymbolTableCreatorBuilder().setScopeStack(scopeStack).build();
    setCD4CodeVisitor(symbolTable);
  }

  /* generated by template core.Method*/
  public de.monticore.cd4code._symboltable.ICD4CodeArtifactScope createFromAST(de.monticore.cdbasis._ast.ASTCDCompilationUnit rootNode) {
    /* generated by template _symboltable.symboltablecreatordelegator.CreateFromASTDelegator*/

    de.monticore.cd4code._symboltable.ICD4CodeArtifactScope as = symbolTable.createFromAST(rootNode);
    if (as.isPresentName()) {
      if (!as.getPackageName().isEmpty()) {
        globalScope.addLoadedFile(as.getPackageName() + "." + as.getName());
      }
      else {
        globalScope.addLoadedFile(as.getName());
      }
    }
    return as;
  }

}
