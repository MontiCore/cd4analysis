/* generated from model CD4CodeBasis */
/* generated by template core.Class*/

/* (c) https://github.com/MontiCore/monticore */
package de.monticore.cd4codebasis._symboltable.phased;

/* generated by template core.Imports*/

import de.monticore.cd4codebasis.CD4CodeBasisMill;
import de.monticore.cd4codebasis._symboltable.CDMethodSignatureSymbol;
import de.monticore.cd4codebasis._symboltable.CDMethodSignatureSymbolBuilder;
import de.monticore.cd4codebasis._symboltable.ICD4CodeBasisArtifactScope;
import de.monticore.cd4codebasis._symboltable.ICD4CodeBasisScope;
import de.monticore.symbols.oosymbols._symboltable.FieldSymbolBuilder;
import de.se_rwth.commons.logging.Log;

import java.util.ArrayDeque;
import java.util.ArrayList;
import java.util.Deque;
import java.util.Optional;

abstract  public   class CD4CodeBasisScopeSkeletonsCreatorTOP implements de.monticore.cd4codebasis._visitor.CD4CodeBasisVisitor {

   /* generated by template core.Attribute*/
protected  Deque<ICD4CodeBasisScope> scopeStack = new ArrayDeque<>();

   /* generated by template core.Attribute*/
private  de.monticore.cd4codebasis._visitor.CD4CodeBasisVisitor realThis = this;

   /* generated by template core.Attribute*/
protected  ICD4CodeBasisScope firstCreatedScope ;


   /* generated by template core.Constructor*/
public CD4CodeBasisScopeSkeletonsCreatorTOP(ICD4CodeBasisScope enclosingScope)  {
   putOnStack(Log.errorIfNull(enclosingScope));
}

   /* generated by template core.Constructor*/
public CD4CodeBasisScopeSkeletonsCreatorTOP(Deque<? extends ICD4CodeBasisScope> scopeStack)  {
   this.scopeStack = Log.errorIfNull((Deque<ICD4CodeBasisScope>)scopeStack);
}


   /* generated by template core.Method*/
public  de.monticore.cd4codebasis._visitor.CD4CodeBasisVisitor getRealThis ()  {
     /* generated by template methods.Get*/

return this.realThis;

}

   /* generated by template core.Method*/
public  void setRealThis (de.monticore.cd4codebasis._visitor.CD4CodeBasisVisitor realThis)  {
     /* generated by template methods.Set*/

this.realThis = realThis;

}

   /* generated by template core.Method*/
public  ICD4CodeBasisScope getFirstCreatedScope ()  {
     /* generated by template methods.Get*/

return this.firstCreatedScope;

}

   /* generated by template core.Method*/
public ICD4CodeBasisArtifactScope createFromAST (de.monticore.cd4codebasis._ast.ASTCDMethodSignature rootNode)  {
     /* generated by template _symboltable.symboltablecreator.CreateFromAST*/

 Log.errorIfNull(rootNode, "0xA7004x652726534 Error by creating of the CD4CodeBasisSymbolTableCreator symbol table: top ast node is null");
 ICD4CodeBasisArtifactScope artifactScope = de.monticore.cd4codebasis.CD4CodeBasisMill.cD4CodeBasisArtifactScopeBuilder()
   .setPackageName("")
   .setImportsList(new ArrayList<>())
   .build();
 putOnStack(artifactScope);
 rootNode.accept(getRealThis());
 return artifactScope;
}

   /* generated by template core.Method*/
public  void putOnStack (ICD4CodeBasisScope scope)  {
     /* generated by template _symboltable.symboltablecreator.PutOnStack*/
 Log.errorIfNull(scope);

if (scope.getEnclosingScope() == null && getCurrentScope().isPresent()) {
   scope.setEnclosingScope(getCurrentScope().get());
   getCurrentScope().get().addSubScope(scope);
} else if (scope.getEnclosingScope() != null && getCurrentScope().isPresent()) {
   if (scope.getEnclosingScope() != getCurrentScope().get()) {
     Log.warn("0xA1043 The enclosing scope is not the same as the current scope on the stack.");
   }
 }

 if (firstCreatedScope == null) {
   firstCreatedScope = scope;
 }

 scopeStack.addLast(scope);
}

   /* generated by template core.Method*/
public  final  Optional<ICD4CodeBasisScope> getCurrentScope ()  {
     return Optional.ofNullable(scopeStack.peekLast());
}

   /* generated by template core.Method*/
public  final  Optional<ICD4CodeBasisScope> removeCurrentScope ()  {
     return Optional.ofNullable(scopeStack.pollLast());
}

   /* generated by template core.Method*/
protected  void setCDMethodSignatureScopeStack (Deque<ICD4CodeBasisScope> scopeStack)  {
     this.scopeStack = scopeStack;
}

   /* generated by template core.Method*/
public  ICD4CodeBasisScope createScope (boolean shadowing)  {
     /* generated by template _symboltable.symboltablecreator.CreateScope*/

 ICD4CodeBasisScope scope = de.monticore.cd4codebasis.CD4CodeBasisMill.cD4CodeBasisScopeBuilder().build();
 scope.setShadowing(shadowing);
 return scope;
}

   /* generated by template core.Method*/
public  void visit (de.monticore.cd4codebasis._ast.ASTCDMethod node)  {
     /* generated by template _symboltable.symboltablecreator.Visit4STC*/

 CDMethodSignatureSymbol symbol = create_CDMethod(node).build();
 addToScopeAndLinkWithNode(symbol, node);
}

   /* generated by template core.Method*/
public  void endVisit (de.monticore.cd4codebasis._ast.ASTCDMethod node)  {
     /* generated by template _symboltable.symboltablecreator.EndVisitSymbol*/

removeCurrentScope();

}

   /* generated by template core.Method*/
protected  CDMethodSignatureSymbolBuilder create_CDMethod (de.monticore.cd4codebasis._ast.ASTCDMethod ast)  {
  final CDMethodSignatureSymbolBuilder cdMethodSignatureSymbolBuilder = CD4CodeBasisMill.cDMethodSignatureSymbolBuilder().setName(ast.getName());
  initialize_CDMethod(cdMethodSignatureSymbolBuilder, ast);
  return cdMethodSignatureSymbolBuilder;
}

   /* generated by template core.Method*/
protected  void initialize_CDMethod (CDMethodSignatureSymbolBuilder symbol,de.monticore.cd4codebasis._ast.ASTCDMethod ast)  {
     /* generated by template core.EmptyBody*/
// empty body

}

   /* generated by template core.Method*/
public  void addToScopeAndLinkWithNode (CDMethodSignatureSymbol symbol,de.monticore.cd4codebasis._ast.ASTCDMethod ast)  {
     /* generated by template _symboltable.symboltablecreator.AddToScopeAndLinkWithNode*/

 addToScope(symbol);
   ICD4CodeBasisScope scope = createScope(false);
 putOnStack(scope);
 symbol.setSpannedScope(scope);
 setLinkBetweenSymbolAndNode(symbol, ast);
}

   /* generated by template core.Method*/
public  void setLinkBetweenSymbolAndNode (CDMethodSignatureSymbol symbol,de.monticore.cd4codebasis._ast.ASTCDMethod ast)  {
     /* generated by template _symboltable.symboltablecreator.SetLinkBetweenSymbolAndNode*/

 // symbol -> ast
 symbol.setAstNode(ast);

 // ast -> symbol
 ast.setSymbol(symbol);
 ast.setEnclosingScope(symbol.getEnclosingScope());

 // ast -> spannedScope
 ast.setSpannedScope(symbol.getSpannedScope());

}

   /* generated by template core.Method*/
public  void setLinkBetweenSpannedScopeAndNode (ICD4CodeBasisScope scope,de.monticore.cd4codebasis._ast.ASTCDMethod ast)  {
     /* generated by template _symboltable.symboltablecreator.SetLinkBetweenSpannedScopeAndNode*/
 // scope -> ast
 scope.setAstNode(ast);

 // ast -> scope
 ast.setSpannedScope(scope);
}

   /* generated by template core.Method*/
public  void visit (de.monticore.cd4codebasis._ast.ASTCD4CodeEnumConstant node)  {
     /* generated by template _symboltable.symboltablecreator.Visit4STC*/

 de.monticore.symbols.oosymbols._symboltable.FieldSymbol symbol = create_CD4CodeEnumConstant(node).build();
 addToScopeAndLinkWithNode(symbol, node);
}

   /* generated by template core.Method*/
public  void endVisit (de.monticore.cd4codebasis._ast.ASTCD4CodeEnumConstant node)  {
     /* generated by template _symboltable.symboltablecreator.EndVisitSymbol*/


}

   /* generated by template core.Method*/
protected  de.monticore.symbols.oosymbols._symboltable.FieldSymbolBuilder create_CD4CodeEnumConstant (de.monticore.cd4codebasis._ast.ASTCD4CodeEnumConstant ast)  {
  final FieldSymbolBuilder fieldSymbolBuilder = CD4CodeBasisMill.fieldSymbolBuilder().setName(ast.getName());
  initialize_CD4CodeEnumConstant(fieldSymbolBuilder, ast);
  return fieldSymbolBuilder;
}

   /* generated by template core.Method*/
protected  void initialize_CD4CodeEnumConstant (de.monticore.symbols.oosymbols._symboltable.FieldSymbolBuilder symbol,de.monticore.cd4codebasis._ast.ASTCD4CodeEnumConstant ast)  {
     /* generated by template core.EmptyBody*/
// empty body

}

   /* generated by template core.Method*/
public  void addToScopeAndLinkWithNode (de.monticore.symbols.oosymbols._symboltable.FieldSymbol symbol,de.monticore.cd4codebasis._ast.ASTCD4CodeEnumConstant ast)  {
     /* generated by template _symboltable.symboltablecreator.AddToScopeAndLinkWithNode*/

 addToScope(symbol);
 setLinkBetweenSymbolAndNode(symbol, ast);
}

   /* generated by template core.Method*/
public  void setLinkBetweenSymbolAndNode (de.monticore.symbols.oosymbols._symboltable.FieldSymbol symbol,de.monticore.cd4codebasis._ast.ASTCD4CodeEnumConstant ast)  {
     /* generated by template _symboltable.symboltablecreator.SetLinkBetweenSymbolAndNode*/

 // symbol -> ast
 symbol.setAstNode(ast);

 // ast -> symbol
 ast.setSymbol(symbol);
 ast.setEnclosingScope(symbol.getEnclosingScope());


}

   /* generated by template core.Method*/
public  void visit (de.monticore.cd4codebasis._ast.ASTCDConstructor node)  {
     /* generated by template _symboltable.symboltablecreator.Visit4STC*/

 CDMethodSignatureSymbol symbol = create_CDConstructor(node).build();
 addToScopeAndLinkWithNode(symbol, node);
}

   /* generated by template core.Method*/
public  void endVisit (de.monticore.cd4codebasis._ast.ASTCDConstructor node)  {
     /* generated by template _symboltable.symboltablecreator.EndVisitSymbol*/

removeCurrentScope();

}

   /* generated by template core.Method*/
protected  CDMethodSignatureSymbolBuilder create_CDConstructor (de.monticore.cd4codebasis._ast.ASTCDConstructor ast)  {
  final CDMethodSignatureSymbolBuilder cdMethodSignatureSymbolBuilder = CD4CodeBasisMill.cDMethodSignatureSymbolBuilder().setName(ast.getName());
  initialize_CDConstructor(cdMethodSignatureSymbolBuilder, ast);
  return cdMethodSignatureSymbolBuilder;
}

   /* generated by template core.Method*/
protected  void initialize_CDConstructor (CDMethodSignatureSymbolBuilder symbol,de.monticore.cd4codebasis._ast.ASTCDConstructor ast)  {
     /* generated by template core.EmptyBody*/
// empty body

}

   /* generated by template core.Method*/
public  void addToScopeAndLinkWithNode (CDMethodSignatureSymbol symbol,de.monticore.cd4codebasis._ast.ASTCDConstructor ast)  {
     /* generated by template _symboltable.symboltablecreator.AddToScopeAndLinkWithNode*/

 addToScope(symbol);
   ICD4CodeBasisScope scope = createScope(false);
 putOnStack(scope);
 symbol.setSpannedScope(scope);
 setLinkBetweenSymbolAndNode(symbol, ast);
}

   /* generated by template core.Method*/
public  void setLinkBetweenSymbolAndNode (CDMethodSignatureSymbol symbol,de.monticore.cd4codebasis._ast.ASTCDConstructor ast)  {
     /* generated by template _symboltable.symboltablecreator.SetLinkBetweenSymbolAndNode*/

 // symbol -> ast
 symbol.setAstNode(ast);

 // ast -> symbol
 ast.setSymbol(symbol);
 ast.setEnclosingScope(symbol.getEnclosingScope());

 // ast -> spannedScope
 ast.setSpannedScope(symbol.getSpannedScope());

}

   /* generated by template core.Method*/
public  void setLinkBetweenSpannedScopeAndNode (ICD4CodeBasisScope scope,de.monticore.cd4codebasis._ast.ASTCDConstructor ast)  {
     /* generated by template _symboltable.symboltablecreator.SetLinkBetweenSpannedScopeAndNode*/
 // scope -> ast
 scope.setAstNode(ast);

 // ast -> scope
 ast.setSpannedScope(scope);
}

   /* generated by template core.Method*/
public  void visit (de.monticore.cd4codebasis._ast.ASTCDParameter node)  {
     /* generated by template _symboltable.symboltablecreator.Visit4STC*/

 de.monticore.symbols.oosymbols._symboltable.FieldSymbol symbol = create_CDParameter(node).build();
 addToScopeAndLinkWithNode(symbol, node);
}

   /* generated by template core.Method*/
public  void endVisit (de.monticore.cd4codebasis._ast.ASTCDParameter node)  {
     /* generated by template _symboltable.symboltablecreator.EndVisitSymbol*/


}

   /* generated by template core.Method*/
protected  de.monticore.symbols.oosymbols._symboltable.FieldSymbolBuilder create_CDParameter (de.monticore.cd4codebasis._ast.ASTCDParameter ast)  {
  final FieldSymbolBuilder fieldSymbolBuilder = CD4CodeBasisMill.fieldSymbolBuilder().setName(ast.getName());
  initialize_CDParameter(fieldSymbolBuilder, ast);
  return fieldSymbolBuilder;
}

   /* generated by template core.Method*/
protected  void initialize_CDParameter (de.monticore.symbols.oosymbols._symboltable.FieldSymbolBuilder symbol,de.monticore.cd4codebasis._ast.ASTCDParameter ast)  {
     /* generated by template core.EmptyBody*/
// empty body

}

   /* generated by template core.Method*/
public  void addToScopeAndLinkWithNode (de.monticore.symbols.oosymbols._symboltable.FieldSymbol symbol,de.monticore.cd4codebasis._ast.ASTCDParameter ast)  {
     /* generated by template _symboltable.symboltablecreator.AddToScopeAndLinkWithNode*/

 addToScope(symbol);
 setLinkBetweenSymbolAndNode(symbol, ast);
}

   /* generated by template core.Method*/
public  void setLinkBetweenSymbolAndNode (de.monticore.symbols.oosymbols._symboltable.FieldSymbol symbol,de.monticore.cd4codebasis._ast.ASTCDParameter ast)  {
     /* generated by template _symboltable.symboltablecreator.SetLinkBetweenSymbolAndNode*/

 // symbol -> ast
 symbol.setAstNode(ast);

 // ast -> symbol
 ast.setSymbol(symbol);
 ast.setEnclosingScope(symbol.getEnclosingScope());


}

   /* generated by template core.Method*/
public  void visit (de.monticore.cd4codebasis._ast.ASTCDThrowsDeclaration node)  {
     /* generated by template _symboltable.symboltablecreator.VisitNoSymbol*/
 if (getCurrentScope().isPresent()) {
   node.setEnclosingScope(getCurrentScope().get());
 }
 else {
   Log.error("Could not set enclosing scope of ASTNode \"" + node
             + "\", because no scope is set yet!");
 }
}

   /* generated by template core.Method*/
public  void addToScope (CDMethodSignatureSymbol symbol)  {
     /* generated by template _symboltable.symboltablecreator.AddToScope*/

 addToScope((de.monticore.symbols.oosymbols._symboltable.MethodSymbol) symbol);
if (getCurrentScope().isPresent()) {
   getCurrentScope().get().add(symbol);
 } else {
   Log.warn("0xA50212 Symbol cannot be added to current scope, since no scope exists.");
 }

}

   /* generated by template core.Method*/
public  void addToScope (de.monticore.cdbasis._symboltable.CDPackageSymbol symbol)  {
     /* generated by template _symboltable.symboltablecreator.AddToScope*/

if (getCurrentScope().isPresent()) {
   getCurrentScope().get().add(symbol);
 } else {
   Log.warn("0xA50212 Symbol cannot be added to current scope, since no scope exists.");
 }

}

   /* generated by template core.Method*/
public  void addToScope (de.monticore.cdbasis._symboltable.CDTypeSymbol symbol)  {
     /* generated by template _symboltable.symboltablecreator.AddToScope*/

 addToScope((de.monticore.symbols.oosymbols._symboltable.OOTypeSymbol) symbol);
if (getCurrentScope().isPresent()) {
   getCurrentScope().get().add(symbol);
 } else {
   Log.warn("0xA50212 Symbol cannot be added to current scope, since no scope exists.");
 }

}

   /* generated by template core.Method*/
public  void addToScope (de.monticore.symbols.oosymbols._symboltable.OOTypeSymbol symbol)  {
     /* generated by template _symboltable.symboltablecreator.AddToScope*/

 addToScope((de.monticore.symbols.basicsymbols._symboltable.TypeSymbol) symbol);
if (getCurrentScope().isPresent()) {
   getCurrentScope().get().add(symbol);
 } else {
   Log.warn("0xA50212 Symbol cannot be added to current scope, since no scope exists.");
 }

}

   /* generated by template core.Method*/
public  void addToScope (de.monticore.symbols.oosymbols._symboltable.FieldSymbol symbol)  {
     /* generated by template _symboltable.symboltablecreator.AddToScope*/

 addToScope((de.monticore.symbols.basicsymbols._symboltable.VariableSymbol) symbol);
if (getCurrentScope().isPresent()) {
   getCurrentScope().get().add(symbol);
 } else {
   Log.warn("0xA50212 Symbol cannot be added to current scope, since no scope exists.");
 }

}

   /* generated by template core.Method*/
public  void addToScope (de.monticore.symbols.oosymbols._symboltable.MethodSymbol symbol)  {
     /* generated by template _symboltable.symboltablecreator.AddToScope*/

 addToScope((de.monticore.symbols.basicsymbols._symboltable.FunctionSymbol) symbol);
if (getCurrentScope().isPresent()) {
   getCurrentScope().get().add(symbol);
 } else {
   Log.warn("0xA50212 Symbol cannot be added to current scope, since no scope exists.");
 }

}

   /* generated by template core.Method*/
public  void addToScope (de.monticore.symbols.basicsymbols._symboltable.DiagramSymbol symbol)  {
     /* generated by template _symboltable.symboltablecreator.AddToScope*/

if (getCurrentScope().isPresent()) {
   getCurrentScope().get().add(symbol);
 } else {
   Log.warn("0xA50212 Symbol cannot be added to current scope, since no scope exists.");
 }

}

   /* generated by template core.Method*/
public  void addToScope (de.monticore.symbols.basicsymbols._symboltable.TypeSymbol symbol)  {
     /* generated by template _symboltable.symboltablecreator.AddToScope*/

if (getCurrentScope().isPresent()) {
   getCurrentScope().get().add(symbol);
 } else {
   Log.warn("0xA50212 Symbol cannot be added to current scope, since no scope exists.");
 }

}

   /* generated by template core.Method*/
public  void addToScope (de.monticore.symbols.basicsymbols._symboltable.TypeVarSymbol symbol)  {
     /* generated by template _symboltable.symboltablecreator.AddToScope*/

 addToScope((de.monticore.symbols.basicsymbols._symboltable.TypeSymbol) symbol);
if (getCurrentScope().isPresent()) {
   getCurrentScope().get().add(symbol);
 } else {
   Log.warn("0xA50212 Symbol cannot be added to current scope, since no scope exists.");
 }

}

   /* generated by template core.Method*/
public  void addToScope (de.monticore.symbols.basicsymbols._symboltable.VariableSymbol symbol)  {
     /* generated by template _symboltable.symboltablecreator.AddToScope*/

if (getCurrentScope().isPresent()) {
   getCurrentScope().get().add(symbol);
 } else {
   Log.warn("0xA50212 Symbol cannot be added to current scope, since no scope exists.");
 }

}

   /* generated by template core.Method*/
public  void addToScope (de.monticore.symbols.basicsymbols._symboltable.FunctionSymbol symbol)  {
     /* generated by template _symboltable.symboltablecreator.AddToScope*/

if (getCurrentScope().isPresent()) {
   getCurrentScope().get().add(symbol);
 } else {
   Log.warn("0xA50212 Symbol cannot be added to current scope, since no scope exists.");
 }

}

   /* generated by template core.Method*/
public  void visit (de.monticore.cd4codebasis._ast.ASTCDMethodSignature node)  {
     /* generated by template _symboltable.symboltablecreator.VisitScope4STC*/

 if (getCurrentScope().isPresent()) {
   node.setEnclosingScope(getCurrentScope().get());
 }
 else {
   Log.error("Could not set enclosing scope of ASTNode \"" + node
     + "\", because no scope is set yet!");
 }
 ICD4CodeBasisScope scope = create_CDMethodSignature(node);
 putOnStack(scope);
 setLinkBetweenSpannedScopeAndNode(scope, node);
}

   /* generated by template core.Method*/
public  void endVisit (de.monticore.cd4codebasis._ast.ASTCDMethodSignature node)  {
     /* generated by template _symboltable.symboltablecreator.EndVisitScope4STC*/

removeCurrentScope();

}

   /* generated by template core.Method*/
protected  ICD4CodeBasisScope create_CDMethodSignature (de.monticore.cd4codebasis._ast.ASTCDMethodSignature ast)  {
     /* generated by template _symboltable.symboltablecreator.CreateSpecialScope*/

ICD4CodeBasisScope scope = createScope(false);
  initialize_CDMethodSignature(scope, ast);
return scope;
}

   /* generated by template core.Method*/
protected  void initialize_CDMethodSignature (ICD4CodeBasisScope scope,de.monticore.cd4codebasis._ast.ASTCDMethodSignature ast)  {
     scope.setName(ast.getName());
}

   /* generated by template core.Method*/
public  void setLinkBetweenSpannedScopeAndNode (ICD4CodeBasisScope scope,de.monticore.cd4codebasis._ast.ASTCDMethodSignature ast)  {
     /* generated by template _symboltable.symboltablecreator.SetLinkBetweenSpannedScopeAndNodeScope*/
 // scope -> ast
 scope.setAstNode(ast);

 // ast -> scope
 ast.setSpannedScope(scope);
}

}
