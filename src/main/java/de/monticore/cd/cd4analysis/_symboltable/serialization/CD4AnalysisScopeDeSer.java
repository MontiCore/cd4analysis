/* (c) https://github.com/MontiCore/monticore */

package de.monticore.cd.cd4analysis._symboltable.serialization;

import de.monticore.cd.cd4analysis._symboltable.*;
import de.monticore.symboltable.modifiers.AccessModifier;
import de.monticore.symboltable.serialization.json.JsonObject;
import de.se_rwth.commons.logging.Log;
import org.apache.commons.lang3.tuple.MutableTriple;
import org.apache.commons.lang3.tuple.Triple;

import java.util.ArrayList;
import java.util.Collections;
import java.util.List;
import java.util.Optional;

/**
 * TODO
 *
 * @author (last commit)
 * @version , 16.12.2019
 * @since TODO
 */
public class CD4AnalysisScopeDeSer extends CD4AnalysisScopeDeSerTOP {

  protected List<Triple<JsonObject,ICD4AnalysisScope, CD4AnalysisScope>> spanningSymbols;

  public  de.monticore.cd.cd4analysis._symboltable.ICD4AnalysisScope deserialize (de.monticore.symboltable.serialization.json.JsonObject scopeJson,de.monticore.cd.cd4analysis._symboltable.ICD4AnalysisScope enclosingScope)  {
    /* generated by template _symboltable.serialization.scopeDeSer.DeserializeJsonObject*/
    spanningSymbols = new ArrayList<>();
    ICD4AnalysisScope scope;

    String kind = scopeJson.getStringMember(de.monticore.symboltable.serialization.JsonConstants.KIND);
    if (this.getSerializedKind().equals(kind)) {
      scope = deserializeCD4AnalysisScope(scopeJson, enclosingScope);
    }
    else if (this.getSerializedASKind().equals(kind)) {
      scope =  deserializeCD4AnalysisArtifactScope(scopeJson,enclosingScope);
    }
    else{
      Log.error("Cannot deserialize \""+scopeJson+"\" with DeSer for kind \""+this.getSerializedKind()+"\"!");
      return null;
    }
    Collections.reverse(spanningSymbols);
    for(Triple<JsonObject,ICD4AnalysisScope, CD4AnalysisScope> t : spanningSymbols){
      addAndLinkSpanningSymbol(t.getLeft(), t.getMiddle(), t.getRight());
    }
    return scope;
  }

  /**
   * This method is overridden to alter the default order in which scopes are descerialized.
   * The spanning symbol has to be set as last attribute. TODO: make this the default
   * @param scopeJson
   * @param scope
   */
  @Override
  protected  void addAndLinkSubScopes (de.monticore.symboltable.serialization.json.JsonObject scopeJson,de.monticore.cd.cd4analysis._symboltable.CD4AnalysisScope scope)  {
    /* generated by template _symboltable.serialization.scopeDeSer.AddAndLinkSubScopes*/

    if (scopeJson.hasMember(de.monticore.symboltable.serialization.JsonConstants.SUBSCOPES)) {
      List<de.monticore.symboltable.serialization.json.JsonElement> elements = scopeJson.getArrayMember(de.monticore.symboltable.serialization.JsonConstants.SUBSCOPES);

      for (de.monticore.symboltable.serialization.json.JsonElement subScopeJson : elements) {
        de.monticore.symboltable.serialization.json.JsonObject s = subScopeJson.getAsJsonObject();
        de.monticore.cd.cd4analysis._symboltable.ICD4AnalysisScope subScope = deserializeCD4AnalysisScope(s, scope);
        subScope.setEnclosingScope(scope);
        scope.addSubScope(subScope);
//        addAndLinkSpanningSymbol(s, subScope, scope);
        spanningSymbols.add(new MutableTriple<>(s, subScope, scope));
      }
    }
  }

  /**
   * This method is overridden to distinguish between different spanning symbols of the same name
   * (e.g., for methods with same name and different parameters)
   * @param subScopeJson
   * @param subScope
   * @param scope
   */
  @Override
  protected  void addAndLinkSpanningSymbol (de.monticore.symboltable.serialization.json.JsonObject subScopeJson,de.monticore.cd.cd4analysis._symboltable.ICD4AnalysisScope subScope,de.monticore.cd.cd4analysis._symboltable.CD4AnalysisScope scope)  {
    /* generated by template _symboltable.serialization.scopeDeSer.AddAndLinkSpanningSymbol*/

    if (subScopeJson.hasMember(de.monticore.symboltable.serialization.JsonConstants.SCOPE_SPANNING_SYMBOL)) {
      de.monticore.symboltable.serialization.json.JsonObject symbolRef = subScopeJson.getObjectMember(de.monticore.symboltable.serialization.JsonConstants.SCOPE_SPANNING_SYMBOL);
      String spanningSymbolName = symbolRef.getStringMember(de.monticore.symboltable.serialization.JsonConstants.NAME);
      String spanningSymbolKind = symbolRef.getStringMember(de.monticore.symboltable.serialization.JsonConstants.KIND);
      if (spanningSymbolKind.equals(cDTypeSymbolDeSer.getSerializedKind())) {
        Optional<CDTypeSymbol> spanningSymbol = scope.resolveCDTypeLocally(spanningSymbolName);
        if (spanningSymbol.isPresent()) {
          subScope.setSpanningSymbol(spanningSymbol.get());
        }
        else {
          Log.error("Spanning symbol of scope "+subScopeJson+" could not be found during deserialization!");
        }
      }
      else if (spanningSymbolKind.equals(cDAssociationSymbolDeSer.getSerializedKind())) {
        Optional<de.monticore.cd.cd4analysis._symboltable.CDAssociationSymbol> spanningSymbol = scope.resolveCDAssociationLocally(spanningSymbolName);
        if (spanningSymbol.isPresent()) {
          subScope.setSpanningSymbol(spanningSymbol.get());
        }
        else {
          Log.error("Spanning symbol of scope "+subScopeJson+" could not be found during deserialization!");
        }
      }
      else if (spanningSymbolKind.equals(cDDefinitionSymbolDeSer.getSerializedKind())) {
        Optional<de.monticore.cd.cd4analysis._symboltable.CDDefinitionSymbol> spanningSymbol = scope.resolveCDDefinitionLocally(spanningSymbolName);
        if (spanningSymbol.isPresent()) {
          subScope.setSpanningSymbol(spanningSymbol.get());
        }
        else {
          Log.error("Spanning symbol of scope "+subScopeJson+" could not be found during deserialization!");
        }
      }
      else if (spanningSymbolKind.equals(cDMethOrConstrSymbolDeSer.getSerializedKind())) {
        String signature = symbolRef.getStringMember("signature");
        List<CDMethOrConstrSymbol> spanningSymbol = scope.resolveCDMethOrConstrLocallyMany(false, spanningSymbolName, AccessModifier.ALL_INCLUSION, x-> x.get.equals(signature) );
        if (spanningSymbol.size() == 1) {
          subScope.setSpanningSymbol(spanningSymbol.get(0));
        }
        else if (spanningSymbol.size() > 1) {
          Log.error("Multiple Spanning symbols of scope "+subScopeJson+" were found during deserialization! "+signature);
        }
        else {
          Log.error("Spanning symbol of scope "+subScopeJson+" could not be found during deserialization!");
        }
      }
      else {
        Log.error("Unknown kind of scope spanning symbol: "+spanningSymbolKind);
      }
    }
  }
}
