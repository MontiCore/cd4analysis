/* generated by template symboltable.SymbolReference*/



package de.monticore.cd.cd4analysis._symboltable;

import com.google.common.base.Preconditions;
import com.google.common.base.Strings;
import de.monticore.cd.cd4analysis._ast.ASTCDType;
import de.monticore.symboltable.Scope;
import de.monticore.symboltable.modifiers.AccessModifier;
import de.monticore.symboltable.references.ISymbolReference;
import de.se_rwth.commons.logging.Log;

import java.util.Collection;
import java.util.List;
import java.util.Optional;
import java.util.function.Predicate;


/**
 * Represents a reference of {@link CDTypeSymbol}.
 */
public class CDTypeSymbolReference extends CDTypeSymbolReferenceTOP {

  public CDTypeSymbolReference(String name, ICD4AnalysisScope enclosingScopeOfReference) {
    super(name, enclosingScopeOfReference);
  }

  @Override
  public String getName() {
    if (isReferencedSymbolLoaded()) {
      return getReferencedSymbol().getName();
    }

    return this.name;
  }

  @Override
  public ICD4AnalysisScope getSpannedScope() {
      return getReferencedSymbol().getSpannedScope();
  }

  @Override
  public ICD4AnalysisScope getEnclosingScope() {
    return getReferencedSymbol().getEnclosingScope();
  }

  @Override
  public String getModelName() {
    return getReferencedSymbol().getModelName();
  }

  @Override
  public String getFullName() {
    return getReferencedSymbol().getFullName();
  }

  @Override
  public List<CDAssociationSymbol> getInheritedAssociations() {
    return getReferencedSymbol().getInheritedAssociations();
  }

  @Override
  public List<CDAssociationSymbol> getAllAssociations() {
    return getReferencedSymbol().getAllAssociations();
  }

  @Override
  public Collection<CDFieldSymbol> getAllVisibleFields() {
    return getReferencedSymbol().getAllVisibleFields();
  }

  @Override
  public String getPackageName() {
    return getReferencedSymbol().getPackageName();
  }

  @Override
  public AccessModifier getAccessModifier() {
    return getReferencedSymbol().getAccessModifier();
  }

  @Override
  public boolean containsStereotype(String name, String value) {
    return getReferencedSymbol().containsStereotype(name, value);
  }

  @Override
  public Optional<Stereotype> getAllStereotype(String name) {
    return getReferencedSymbol().getAllStereotype(name);
  }

  @Override
  public boolean containsAllStereotype(String name, String value) {
    return getReferencedSymbol().containsAllStereotype(name, value);
  }

  @Override
  public Optional<Stereotype> getStereotype(String name) {
    return getReferencedSymbol().getStereotype(name);
  }

  @Override
  public Optional<CDTypeSymbolReference> getSuperClass() {
    return getReferencedSymbol().getSuperClass();
  }

  @Override
  public List<CDTypeSymbolReference> getSuperTypes() {
    return getReferencedSymbol().getSuperTypes();
  }

  @Override
  public String getExtendedName() {
    return getReferencedSymbol().getExtendedName();
  }

  @Override
  public void addSpecAssociation(final CDAssociationSymbol assoc) {
    getReferencedSymbol().addSpecAssociation(assoc);
  }

  @Override
  public List<CDAssociationSymbol> getSpecAssociations() {
    return getReferencedSymbol().getSpecAssociations();
  }

  @Override
  public List<CDAssociationSymbol> getAllSpecAssociations() {
    return getReferencedSymbol().getAllSpecAssociations();
  }


  @Override
  public List<CDAssociationSymbol> getInheritedSpecAssociations() {
    return getReferencedSymbol().getInheritedSpecAssociations();
  }

  @Override
  public boolean isInterface() {
    return getReferencedSymbol().isInterface();
  }

  @Override
  public boolean isAbstract() {
    return getReferencedSymbol().isAbstract();
  }

  @Override
  public boolean isFinal() {
    return getReferencedSymbol().isFinal();
  }

  @Override
  public boolean isEnum() {
    return getReferencedSymbol().isEnum();
  }

  @Override
  public boolean isClass() {
    return getReferencedSymbol().isClass();
  }

  @Override
  public List<Stereotype> getAllStereotypes() {
    return getReferencedSymbol().getAllStereotypes();
  }

  @Override
  public List<Stereotype> getStereotypes() {
    return getReferencedSymbol().getStereotypes();
  }

  @Override
  public boolean isPrivate() {
    return getReferencedSymbol().isPrivate();
  }

  @Override
  public boolean isProtected() {
    return getReferencedSymbol().isProtected();
  }

  @Override
  public boolean isPublic() {
    return getReferencedSymbol().isPublic();
  }



}

