/* (c) https://github.com/MontiCore/monticore */
/* generated by template symboltable.SymbolReference*/


package de.monticore.cd.cd4analysis._symboltable;

import de.monticore.cd.cd4analysis._ast.ASTCDType;

import java.util.ArrayList;
import java.util.Collection;
import java.util.List;
import java.util.Optional;

import static com.google.common.collect.ImmutableList.copyOf;


/**
 * Represents a reference of {@link CDTypeSymbol}.
 */
public class CDTypeSymbolReference extends CDTypeSymbolReferenceTOP {

  public CDTypeSymbolReference(String name, ICD4AnalysisScope enclosingScopeOfReference) {
    super(name, enclosingScopeOfReference);
  }

  @Override
  public String getModelName() {
    return getReferencedSymbol().getModelName();
  }

  @Override
  public List<CDAssociationSymbol> getInheritedAssociations() {
    return getReferencedSymbol().getInheritedAssociations();
  }

  @Override
  public List<CDAssociationSymbol> getAllAssociations() {
    return getReferencedSymbol().getAllAssociations();
  }

  @Override
  public Collection<CDFieldSymbol> getAllVisibleFields() {
    return getReferencedSymbol().getAllVisibleFields();
  }

  @Override
  public String getPackageName() {
    return getReferencedSymbol().getPackageName();
  }

  @Override
  public boolean containsStereotype(String name, String value) {
    return getReferencedSymbol().containsStereotype(name, value);
  }

  @Override
  public Optional<Stereotype> getAllStereotype(String name) {
    return getReferencedSymbol().getAllStereotype(name);
  }

  @Override
  public boolean containsAllStereotype(String name, String value) {
    return getReferencedSymbol().containsAllStereotype(name, value);
  }

  @Override
  public Optional<Stereotype> getStereotype(String name) {
    return getReferencedSymbol().getStereotype(name);
  }

  @Override
  public Optional<CDTypeSymbolReference> getSuperClass() {
    return getReferencedSymbol().getSuperClass();
  }

  @Override
  public List<CDTypeSymbolReference> getSuperTypes() {
    return getReferencedSymbol().getSuperTypes();
  }

  @Override
  public String getExtendedName() {
    return getReferencedSymbol().getExtendedName();
  }

  @Override
  public void addSpecAssociation(final CDAssociationSymbol assoc) {
    getReferencedSymbol().addSpecAssociation(assoc);
  }

  @Override
  public Optional<ASTCDType> getAstNode() {
    return Optional.ofNullable(this.astNode);
  }

  @Override
  public List<CDAssociationSymbol> getSpecAssociations() {
    return getReferencedSymbol().getSpecAssociations();
  }

  @Override
  public List<CDAssociationSymbol> getAllSpecAssociations() {
    return getReferencedSymbol().getAllSpecAssociations();
  }


  @Override
  public List<CDAssociationSymbol> getInheritedSpecAssociations() {
    return getReferencedSymbol().getInheritedSpecAssociations();
  }

  @Override
  public List<Stereotype> getAllStereotypes() {
    return getReferencedSymbol().getAllStereotypes();
  }

  @Override
  public List<Stereotype> getStereotypes() {
    return getReferencedSymbol().getStereotypes();
  }

  @Override
  public List<CDTypeSymbolReference> getCdInterfaces() {
    return getReferencedSymbol().getCdInterfaces();
  }

  private List<CDTypeSymbolReference> actualTypeArguments = new ArrayList<>();

  private int dimension = 0;

  public List<CDTypeSymbolReference> getActualTypeArguments() {
    return copyOf(actualTypeArguments);
  }

  public void setActualTypeArguments(List<CDTypeSymbolReference> actualTypeArguments) {
    this.actualTypeArguments = new ArrayList<>(actualTypeArguments);
  }

  public int getDimension() {
    return dimension;
  }

  public void setDimension(int arrayDimension) {
    this.dimension = arrayDimension;
  }

}

