/*
 * ******************************************************************************
 * MontiCore Language Workbench, www.monticore.de
 * Copyright (c) 2017, MontiCore, All rights reserved.
 *
 * This project is free software; you can redistribute it and/or
 * modify it under the terms of the GNU Lesser General Public
 * License as published by the Free Software Foundation; either
 * version 3.0 of the License, or (at your option) any later version.
 * This library is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU
 * Lesser General Public License for more details.
 *
 * You should have received a copy of the GNU Lesser General Public
 * License along with this project. If not, see <http://www.gnu.org/licenses/>.
 * ******************************************************************************
 */

package de.monticore.umlcd4a.prettyprint;

import java.util.List;
import java.util.Set;
import java.util.Date;
import java.util.Formatter;

classdiagram SocNet {

  interface Post;

  abstract class Profile{
    Formatter t;
    String profileName;
    derived int numOfPosts;
    derived int friends;
  }

  class Person extends Profile{
    Date lastVisit;
    String firstName;
    String secondName;
    Date dateOfBirth;
    int zip;
    String city;
    String country;
  }

  class Group extends Profile{
    boolean isOpen;
    Date created;
    String purpose;
    derived int members;
  }

  class Relationship{
    boolean isPending;
    Date requested;
    Date accepted;
  }

  class InstantMessage implements Post{
    Date timestamp;
    String content;
  }

  class PhotoMessage extends InstantMessage;

  class Photo{
    double height;
    double width;
  }

  class Tag{
    boolean confirmed;
  }

  enum RelationType{
    FRIEND,
    FAMILY,
    FOLLOWER,
    COLLEAGUE,
    OTHER;
  }

  association member  [*]  Person <-> Group  [*]  ;

  association  [1]  Person (organizer) <-> (organized) [profileName] Group  [*]  ;

  association invited  [*]  Relationship <-> Profile  [1]  ;

  association initiated  [*]  Relationship <-> Profile  [1]  ;

  association Relationship -> RelationType  [1]  ;

  association received  [*]  Profile <-> Post  [*]  <<ordered>>;

  association sent  [1]  Profile <-> Post  [*]  <<ordered>>;

  association  [*]  InstantMessage <-> (replyTo) InstantMessage  [1]  ;

  association  [*]  Photo (picture) <-> PhotoMessage ;

  association  [1]  Person (tagged) <-> Tag  [*]  ;

  association  [*]  Tag <-> Photo  [1]  ;

}
