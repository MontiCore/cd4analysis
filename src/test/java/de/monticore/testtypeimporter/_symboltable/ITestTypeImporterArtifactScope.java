/* generated from model TestTypeImporter */
/* generated by template core.Interface */

/* (c) https://github.com/MontiCore/monticore */
package de.monticore.testtypeimporter._symboltable;

/* generated by template core.Imports */

import java.util.*;
import java.util.function.*;
import java.util.stream.Stream;

import com.google.common.collect.Lists;

import de.se_rwth.commons.logging.Log;
import de.monticore.ast.ASTNode;
import de.monticore.ast.Comment;
import de.se_rwth.commons.SourcePosition;
import de.monticore.symboltable.*;

public interface ITestTypeImporterArtifactScope extends ITestTypeImporterArtifactScopeTOP {
  
  default public List<String> getRemainingNameForResolveDown(String symbolName) {
    final String packageAS = this.getPackageName();
    final com.google.common.collect.FluentIterable<String> packageASNameParts = com.google.common.collect.FluentIterable
        .from(de.se_rwth.commons.Splitters.DOT.omitEmptyStrings().split(packageAS));
    
    final com.google.common.collect.FluentIterable<String> symbolNameParts = com.google.common.collect.FluentIterable
        .from(de.se_rwth.commons.Splitters.DOT.split(symbolName));
    String remainingSymbolName = symbolName;
    
    if (symbolNameParts.size() > packageASNameParts.size()) {
      remainingSymbolName = de.se_rwth.commons.Joiners.DOT.join(symbolNameParts.skip(packageASNameParts.size()));
    }
    
    return Lists.newArrayList(remainingSymbolName);
  }
  
}
